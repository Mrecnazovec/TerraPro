"use strict";function accordion(e){e.parentElement.classList.toggle("active");let t=e.nextElementSibling;t.style.maxHeight&&"none"!==t.style.maxHeight?t.style.maxHeight=null:t.style.maxHeight=t.scrollHeight+"px"}!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).LazyLoad=t()}(this,function(){function t(){return(t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a,s=arguments[t];for(a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a])}return e}).apply(this,arguments)}function n(e){return t({},te,e)}function e(e,t){var a,s="LazyLoad::Initialized",t=new e(t);try{a=new CustomEvent(s,{detail:{instance:t}})}catch(e){(a=document.createEvent("CustomEvent")).initCustomEvent(s,!1,!1,{instance:t})}window.dispatchEvent(a)}function o(e,t){return e.getAttribute(le+t)}function c(e){return b(e)===ne}function p(e){return e.llTempImage}function D(e,t){e&&(e.toLoadCount=t)}function N(e){for(var t,a=[],s=0;t=e.children[s];s+=1)"SOURCE"===t.tagName&&a.push(t);return a}function G(e,t){N(e).forEach(t)}function H(e){delete e[g]}function a(t,e){var a;z(t)||(a={},e.forEach(function(e){a[e]=t.getAttribute(e)}),t[g]=a)}function u(s,e){var i;z(s)&&(i=pe(s),e.forEach(function(e){var t,a;t=s,(a=i[e=e])?t.setAttribute(e,a):t.removeAttribute(e)}))}function B(e,t,a){C(e,t.class_applied),y(e,re),a&&(t.unobserve_completed&&M(e,t),S(t.callback_applied,e,a))}function q(e,t,a){C(e,t.class_loading),y(e,v),a&&($(a,1),S(t.callback_loading,e,a))}function s(e,t,a){a&&e.setAttribute(t,a)}function X(e,t){s(e,f,o(e,t.data_sizes)),s(e,r,o(e,t.data_srcset)),s(e,m,o(e,t.data_src))}function R(e,t){!t||0<t.loadingCount||0<t.toLoadCount||S(e.callback_finish,t)}function Y(e,t,a){e.addEventListener(t,a),e.llEvLisnrs[t]=a}function V(e,t,a){delete e.llTempImage,$(a,-1),a&&--a.toLoadCount,T(e,t.class_loading),t.unobserve_completed&&M(e,a)}function d(n,l,o){var e,t,d=p(n)||n;I(d)||(I(e=d)||(e.llEvLisnrs={}),t="VIDEO"===e.tagName?"loadeddata":"load",Y(e,t,function(e){var t=0,a=n,s=l,i=o,r=c(a);V(a,s,i),C(a,s.class_loaded),y(a,ie),S(s.callback_loaded,a,i),r||R(s,i),O(d)}),Y(e,"error",function(e){var t=0,a=n,s=l,i=o,r=c(a);V(a,s,i),C(a,s.class_error),y(a,w),S(s.callback_error,a,i),s.restore_on_error&&u(a,L),r||R(s,i),O(d)}))}function j(e){return e.use_native&&"loading"in HTMLImageElement.prototype}function W(e,d,c){e.forEach(function(e){return e.isIntersecting||0<e.intersectionRatio?(i=e.target,r=e,n=d,l=c,o=0<=oe.indexOf(b(i)),y(i,"entered"),C(i,n.class_entered),T(i,n.class_exited),n.unobserve_entered&&M(i,l),S(n.callback_enter,i,r,l),void(o||A(i,n,l))):(r=e.target,o=e,i=d,n=c,void(E(r)||(C(r,i.class_exited),l=r,e=o,a=n,(t=i).cancel_on_exit&&b(l)===v&&"IMG"===l.tagName&&(O(l),P(s=l,function(e){fe(e)}),fe(s),ge(l),T(l,t.class_loading),$(a,-1),x(l),S(t.callback_cancel,l,e,a)),S(i.callback_exit,r,o,n))));var t,a,s,i,r,n,l,o})}function F(e){return Array.prototype.slice.call(e)}function l(e){return e.container.querySelectorAll(e.elements_selector)}function U(e){return b(e)===w}function K(e,t){return e=e||l(t),F(e).filter(E)}function i(e,t){var s,i,a,r,e=n(e);this._settings=e,this.loadingCount=0,a=e,r=this,J&&!j(a)&&(r._observer=new IntersectionObserver(function(e){W(e,a,r)},{root:a.container===document?null:a.container,rootMargin:a.thresholds||a.threshold+"px"})),s=e,i=this,h&&(i._onlineHandler=function(){var t,e,a;e=i,a=l(t=s),F(a).filter(U).forEach(function(e){T(e,t.class_error),x(e)}),e.update()},window.addEventListener("online",i._onlineHandler)),this.update(t)}var h="undefined"!=typeof window,Z=h&&!("onscroll"in window)||"undefined"!=typeof navigator&&/(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),J=h&&"IntersectionObserver"in window,Q=h&&"classList"in document.createElement("p"),ee=h&&1<window.devicePixelRatio,te={elements_selector:".lazy",container:Z||h?document:null,threshold:300,thresholds:null,data_src:"src",data_srcset:"srcset",data_sizes:"sizes",data_bg:"bg",data_bg_hidpi:"bg-hidpi",data_bg_multi:"bg-multi",data_bg_multi_hidpi:"bg-multi-hidpi",data_bg_set:"bg-set",data_poster:"poster",class_applied:"applied",class_loading:"loading",class_loaded:"loaded",class_error:"error",class_entered:"entered",class_exited:"exited",unobserve_completed:!0,unobserve_entered:!1,cancel_on_exit:!0,callback_enter:null,callback_exit:null,callback_applied:null,callback_loading:null,callback_loaded:null,callback_error:null,callback_finish:null,callback_cancel:null,use_native:!1,restore_on_error:!1},m="src",r="srcset",f="sizes",ae="poster",g="llOriginalAttrs",se="data",v="loading",ie="loaded",re="applied",w="error",ne="native",le="data-",b=function(e){return o(e,"ll-status")},y=function(e,t){var a;e=e,a="data-ll-status",null!==t?e.setAttribute(a,t):e.removeAttribute(a)},x=function(e){return y(e,null)},E=function(e){return null===b(e)},oe=[v,ie,re,w],S=function(e,t,a,s){e&&(void 0===s?void 0===a?e(t):e(t,a):e(t,a,s))},C=function(e,t){Q?e.classList.add(t):e.className+=(e.className?" ":"")+t},T=function(e,t){Q?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\s+)"+t+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},M=function(e,t){t&&(t=t._observer)&&t.unobserve(e)},$=function(e,t){e&&(e.loadingCount+=t)},P=function(e,t){e=e.parentNode;e&&"PICTURE"===e.tagName&&N(e).forEach(t)},k=[m],de=[m,ae],L=[m,r,f],ce=[se],z=function(e){return!!e[g]},pe=function(e){return e[g]},ue={IMG:function(e,t){P(e,function(e){a(e,L),X(e,t)}),a(e,L),X(e,t)},IFRAME:function(e,t){a(e,k),s(e,m,o(e,t.data_src))},VIDEO:function(e,t){G(e,function(e){a(e,k),s(e,m,o(e,t.data_src))}),a(e,de),s(e,ae,o(e,t.data_poster)),s(e,m,o(e,t.data_src)),e.load()},OBJECT:function(e,t){a(e,ce),s(e,se,o(e,t.data_src))}},he=["IMG","IFRAME","VIDEO","OBJECT"],me=function(e,t,a){e.removeEventListener(t,a)},I=function(e){return!!e.llEvLisnrs},O=function(e){if(I(e)){var t,a=e.llEvLisnrs;for(t in a){var s=a[t];me(e,t,s)}delete e.llEvLisnrs}},A=function(e,t,a){var s,i,r,n,l;-1<he.indexOf(e.tagName)?(d(r=e,s=t,l=a),s=s,l=l,(i=ue[(r=r).tagName])&&(i(r,s),q(r,s,l))):(i=t,r=a,(s=e).llTempImage=document.createElement("IMG"),d(s,i,r),z(l=s)||(l[g]={backgroundImage:l.style.backgroundImage}),l=r,e=o(t=s,(a=i).data_bg),n=o(t,a.data_bg_hidpi),(n=ee&&n?n:e)&&(t.style.backgroundImage='url("'.concat(n,'")'),p(t).setAttribute(m,n),q(t,a,l)),e=r,a=o(n=s,(t=i).data_bg_multi),l=o(n,t.data_bg_multi_hidpi),(l=ee&&l?l:a)&&(n.style.backgroundImage=l,B(n,t,e)),a=r,(t=o(l=s,(n=i).data_bg_set))&&(e=(t=t.split("|")).map(function(e){return"image-set(".concat(e,")")}),l.style.backgroundImage=e.join(),""===l.style.backgroundImage&&(e=t.map(function(e){return"-webkit-image-set(".concat(e,")")}),l.style.backgroundImage=e.join()),B(l,n,a)))},fe=function(e){e.removeAttribute(m),e.removeAttribute(r),e.removeAttribute(f)},ge=function(e){P(e,function(e){u(e,L)}),u(e,L)},ve={IMG:ge,IFRAME:function(e){u(e,k)},VIDEO:function(e){G(e,function(e){u(e,k)}),u(e,de),e.load()},OBJECT:function(e){u(e,ce)}},we=["IMG","IFRAME","VIDEO"];if(i.prototype={update:function(e){var t,a,s,i,r=this._settings,e=K(e,r);D(this,e.length),!Z&&J?j(r)?(s=r,i=this,e.forEach(function(e){var t,a;-1!==we.indexOf(e.tagName)&&(t=s,a=i,(e=e).setAttribute("loading","lazy"),d(e,t,a),(a=ue[e.tagName])&&a(e,t),y(e,ne))}),D(i,0)):(r=e,(t=this._observer).disconnect(),a=t,r.forEach(function(e){a.observe(e)})):this.loadAll(e)},destroy:function(){this._observer&&this._observer.disconnect(),h&&window.removeEventListener("online",this._onlineHandler),l(this._settings).forEach(function(e){H(e)}),delete this._observer,delete this._settings,delete this._onlineHandler,delete this.loadingCount,delete this.toLoadCount},loadAll:function(e){var t=this,a=this._settings;K(e,a).forEach(function(e){M(e,t),A(e,a,t)})},restoreAll:function(){var i=this._settings;l(i).forEach(function(e){var t,a,s;t=i,(s=ve[(a=e=e).tagName])?s(a):z(s=a)&&(a=pe(s),s.style.backgroundImage=a.backgroundImage),s=t,E(a=e)||c(a)||(T(a,s.class_entered),T(a,s.class_exited),T(a,s.class_applied),T(a,s.class_loading),T(a,s.class_loaded),T(a,s.class_error)),x(e),H(e)})}},i.load=function(e,t){t=n(t);A(e,t)},i.resetStatus=function(e){x(e)},h){var be=i,_=window.lazyLoadOptions;if(_)if(_.length)for(var ye,xe=0;ye=_[xe];xe+=1)e(be,ye);else e(be,_)}return i}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Swiper=t()}(this,function(){function s(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(t,a){void 0===t&&(t={}),void 0===a&&(a={}),Object.keys(a).forEach(e=>{void 0===t[e]?t[e]=a[e]:s(a[e])&&s(t[e])&&0<Object.keys(a[e]).length&&i(t[e],a[e])})}const t={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function C(){var e="undefined"!=typeof document?document:{};return i(e,t),e}const D={document:t,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function z(){var e="undefined"!=typeof window?window:{};return i(e,D),e}class n extends Array{constructor(e){if("number"==typeof e)super(e);else{super(...e||[]);{e=this;const t=e.__proto__;Object.defineProperty(e,"__proto__",{get:()=>t,set(e){t.__proto__=e}})}}}}function r(e){const t=[];return(e=void 0===e?[]:e).forEach(e=>{Array.isArray(e)?t.push(...r(e)):t.push(e)}),t}function l(e,t){return Array.prototype.filter.call(e,t)}function I(e,t){const a=z(),s=C();let i=[];if(!t&&e instanceof n)return e;if(!e)return new n(i);if("string"==typeof e){const a=e.trim();if(0<=a.indexOf("<")&&0<=a.indexOf(">")){let e="div";0===a.indexOf("<li")&&(e="ul"),0===a.indexOf("<tr")&&(e="tbody"),0!==a.indexOf("<td")&&0!==a.indexOf("<th")||(e="tr"),0===a.indexOf("<tbody")&&(e="table"),0===a.indexOf("<option")&&(e="select");const t=s.createElement(e);t.innerHTML=a;for(let e=0;e<t.childNodes.length;e+=1)i.push(t.childNodes[e])}else i=function(e,t){if("string"!=typeof e)return[e];const a=[],s=t.querySelectorAll(e);for(let e=0;e<s.length;e+=1)a.push(s[e]);return a}(e.trim(),t||s)}else if(e.nodeType||e===a||e===s)i.push(e);else if(Array.isArray(e)){if(e instanceof n)return e;i=e}return new n(function(t){const a=[];for(let e=0;e<t.length;e+=1)-1===a.indexOf(t[e])&&a.push(t[e]);return a}(i))}I.fn=n.prototype;const a={addClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=r(t.map(e=>e.split(" ")));return this.forEach(e=>{e.classList.add(...s)}),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=r(t.map(e=>e.split(" ")));return this.forEach(e=>{e.classList.remove(...s)}),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=r(t.map(e=>e.split(" ")));return 0<l(this,t=>0<s.filter(e=>t.classList.contains(e)).length).length},toggleClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=r(t.map(e=>e.split(" ")));this.forEach(t=>{s.forEach(e=>{t.classList.toggle(e)})})},attr:function(t,a){if(1===arguments.length&&"string"==typeof t)return this[0]?this[0].getAttribute(t):void 0;for(let e=0;e<this.length;e+=1)if(2===arguments.length)this[e].setAttribute(t,a);else for(const a in t)this[e][a]=t[a],this[e].setAttribute(a,t[a]);return this},removeAttr:function(t){for(let e=0;e<this.length;e+=1)this[e].removeAttribute(t);return this},transform:function(t){for(let e=0;e<this.length;e+=1)this[e].style.transform=t;return this},transition:function(t){for(let e=0;e<this.length;e+=1)this[e].style.transitionDuration="string"!=typeof t?t+"ms":t;return this},on:function(){for(var t=arguments.length,a=new Array(t),e=0;e<t;e++)a[e]=arguments[e];let[s,i,r,n]=a;function l(t){var e=t.target;if(e){const a=t.target.dom7EventData||[];if(a.indexOf(t)<0&&a.unshift(t),I(e).is(i))r.apply(e,a);else{const t=I(e).parents();for(let e=0;e<t.length;e+=1)I(t[e]).is(i)&&r.apply(t[e],a)}}}function o(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof a[1]&&([s,r,n]=a,i=void 0),n=n||!1;var d=s.split(" ");let c;for(let e=0;e<this.length;e+=1){const a=this[e];if(i)for(c=0;c<d.length;c+=1){const t=d[c];a.dom7LiveListeners||(a.dom7LiveListeners={}),a.dom7LiveListeners[t]||(a.dom7LiveListeners[t]=[]),a.dom7LiveListeners[t].push({listener:r,proxyListener:l}),a.addEventListener(t,l,n)}else for(c=0;c<d.length;c+=1){const t=d[c];a.dom7Listeners||(a.dom7Listeners={}),a.dom7Listeners[t]||(a.dom7Listeners[t]=[]),a.dom7Listeners[t].push({listener:r,proxyListener:o}),a.addEventListener(t,o,n)}}return this},off:function(){for(var e=arguments.length,a=new Array(e),s=0;s<e;s++)a[s]=arguments[s];let[t,i,r,n]=a;"function"==typeof a[1]&&([t,r,n]=a,i=void 0),n=n||!1;var l=t.split(" ");for(let e=0;e<l.length;e+=1){const a=l[e];for(let e=0;e<this.length;e+=1){const s=this[e];let t;if(!i&&s.dom7Listeners?t=s.dom7Listeners[a]:i&&s.dom7LiveListeners&&(t=s.dom7LiveListeners[a]),t&&t.length)for(let e=t.length-1;0<=e;--e){const i=t[e];(r&&i.listener===r||r&&i.listener&&i.listener.dom7proxy&&i.listener.dom7proxy===r||!r)&&(s.removeEventListener(a,i.proxyListener,n),t.splice(e,1))}}}return this},trigger:function(){const t=z();for(var a=arguments.length,s=new Array(a),i=0;i<a;i++)s[i]=arguments[i];const r=s[0].split(" "),n=s[1];for(let e=0;e<r.length;e+=1){const i=r[e];for(let e=0;e<this.length;e+=1){const r=this[e];if(t.CustomEvent){const a=new t.CustomEvent(i,{detail:n,bubbles:!0,cancelable:!0});r.dom7EventData=s.filter((e,t)=>0<t),r.dispatchEvent(a),r.dom7EventData=[],delete r.dom7EventData}}}return this},transitionEnd:function(a){const s=this;return a&&s.on("transitionend",function e(t){t.target===this&&(a.call(this,t),s.off("transitionend",e))}),this},outerWidth:function(e){if(0<this.length){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){const e=z();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(0<this.length){const e=z(),t=C(),a=this[0],s=a.getBoundingClientRect(),i=t.body,r=a.clientTop||i.clientTop||0,n=a.clientLeft||i.clientLeft||0,l=a===e?e.scrollY:a.scrollTop,o=a===e?e.scrollX:a.scrollLeft;return{top:s.top+l-r,left:s.left+o-n}}return null},css:function(e,t){const a=z();let s;if(1===arguments.length){if("string"!=typeof e){for(s=0;s<this.length;s+=1)for(const t in e)this[s].style[t]=e[t];return this}if(this[0])return a.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e)for(s=0;s<this.length;s+=1)this[s].style[e]=t;return this},each:function(a){return a&&this.forEach((e,t)=>{a.apply(e,[e,t])}),this},html:function(t){if(void 0===t)return this[0]?this[0].innerHTML:null;for(let e=0;e<this.length;e+=1)this[e].innerHTML=t;return this},text:function(t){if(void 0===t)return this[0]?this[0].textContent.trim():null;for(let e=0;e<this.length;e+=1)this[e].textContent=t;return this},is:function(e){const t=z(),a=C(),s=this[0];let i,r;if(s&&void 0!==e)if("string"==typeof e){if(s.matches)return s.matches(e);if(s.webkitMatchesSelector)return s.webkitMatchesSelector(e);if(s.msMatchesSelector)return s.msMatchesSelector(e);for(i=I(e),r=0;r<i.length;r+=1)if(i[r]===s)return!0}else{if(e===a)return s===a;if(e===t)return s===t;if(e.nodeType||e instanceof n)for(i=e.nodeType?[e]:e,r=0;r<i.length;r+=1)if(i[r]===s)return!0}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;return I(t-1<e?[]:e<0?(t=t+e)<0?[]:[this[t]]:[this[e]])},append:function(){var a;const s=C();for(let e=0;e<arguments.length;e+=1){a=e<0||arguments.length<=e?void 0:arguments[e];for(let t=0;t<this.length;t+=1)if("string"==typeof a){const C=s.createElement("div");for(C.innerHTML=a;C.firstChild;)this[t].appendChild(C.firstChild)}else if(a instanceof n)for(let e=0;e<a.length;e+=1)this[t].appendChild(a[e]);else this[t].appendChild(a)}return this},prepend:function(e){const t=C();let a,s;for(a=0;a<this.length;a+=1)if("string"==typeof e){const C=t.createElement("div");for(C.innerHTML=e,s=C.childNodes.length-1;0<=s;--s)this[a].insertBefore(C.childNodes[s],this[a].childNodes[0])}else if(e instanceof n)for(s=0;s<e.length;s+=1)this[a].insertBefore(e[s],this[a].childNodes[0]);else this[a].insertBefore(e,this[a].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&I(this[0].nextElementSibling).is(e)?I([this[0].nextElementSibling]):I([]):this[0].nextElementSibling?I([this[0].nextElementSibling]):I([]):I([])},nextAll:function(e){const t=[];let a=this[0];if(!a)return I([]);for(;a.nextElementSibling;){var s=a.nextElementSibling;e&&!I(s).is(e)||t.push(s),a=s}return I(t)},prev:function(e){var t;return 0<this.length?(t=this[0],e?t.previousElementSibling&&I(t.previousElementSibling).is(e)?I([t.previousElementSibling]):I([]):t.previousElementSibling?I([t.previousElementSibling]):I([])):I([])},prevAll:function(e){const t=[];let a=this[0];if(!a)return I([]);for(;a.previousElementSibling;){var s=a.previousElementSibling;e&&!I(s).is(e)||t.push(s),a=s}return I(t)},parent:function(t){const a=[];for(let e=0;e<this.length;e+=1)null===this[e].parentNode||t&&!I(this[e].parentNode).is(t)||a.push(this[e].parentNode);return I(a)},parents:function(a){const s=[];for(let t=0;t<this.length;t+=1){let e=this[t].parentNode;for(;e;)a&&!I(e).is(a)||s.push(e),e=e.parentNode}return I(s)},closest:function(e){let t=this;return void 0===e?I([]):t=t.is(e)?t:t.parents(e).eq(0)},find:function(t){const a=[];for(let e=0;e<this.length;e+=1){var s=this[e].querySelectorAll(t);for(let e=0;e<s.length;e+=1)a.push(s[e])}return I(a)},children:function(t){const a=[];for(let e=0;e<this.length;e+=1){var s=this[e].children;for(let e=0;e<s.length;e+=1)t&&!I(s[e]).is(t)||a.push(s[e])}return I(a)},filter:function(e){return I(l(this,e))},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function T(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function v(){return Date.now()}function O(e,t){void 0===t&&(t="x");const a=z();let s,i,r;const n=function(e){const t=z();let a;return a=(a=!(a=t.getComputedStyle?t.getComputedStyle(e,null):a)&&e.currentStyle?e.currentStyle:a)||e.style}(e);return a.WebKitCSSMatrix?(6<(i=n.transform||n.webkitTransform).split(",").length&&(i=i.split(", ").map(e=>e.replace(",",".")).join(", ")),r=new a.WebKitCSSMatrix("none"===i?"":i)):(r=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=r.toString().split(",")),"x"===t&&(i=a.WebKitCSSMatrix?r.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),(i="y"===t?a.WebKitCSSMatrix?r.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5]):i)||0}function d(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function m(e){const a=Object(arguments.length<=0?void 0:e),t=["__proto__","constructor","prototype"];for(let e=1;e<arguments.length;e+=1){var s=e<0||arguments.length<=e?void 0:arguments[e];if(null!=s&&(l=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?l instanceof HTMLElement:l&&(1===l.nodeType||11===l.nodeType)))){var i=Object.keys(Object(s)).filter(e=>t.indexOf(e)<0);for(let e=0,t=i.length;e<t;e+=1){var r=i[e],n=Object.getOwnPropertyDescriptor(s,r);void 0!==n&&n.enumerable&&(d(a[r])&&d(s[r])?s[r].__swiper__?a[r]=s[r]:m(a[r],s[r]):!d(a[r])&&d(s[r])?(a[r]={},s[r].__swiper__?a[r]=s[r]:m(a[r],s[r])):a[r]=s[r])}}}var l;return a}function M(e,t,a){e.style.setProperty(t,a)}function w(e){let{swiper:a,targetPosition:s,side:i}=e;const r=z(),n=-a.translate;let l,o=null;const d=a.params.speed,c=(a.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(a.cssModeFrameID),s>n?"next":"prev"),p=(e,t)=>"next"===c&&t<=e||"prev"===c&&e<=t,u=()=>{l=(new Date).getTime(),null===o&&(o=l);var e=Math.max(Math.min((l-o)/d,1),0),e=.5-Math.cos(e*Math.PI)/2;let t=n+e*(s-n);p(t,s)&&(t=s),a.wrapperEl.scrollTo({[i]:t}),p(t,s)?(a.wrapperEl.style.overflow="hidden",a.wrapperEl.style.scrollSnapType="",setTimeout(()=>{a.wrapperEl.style.overflow="",a.wrapperEl.scrollTo({[i]:t})}),r.cancelAnimationFrame(a.cssModeFrameID)):a.cssModeFrameID=r.requestAnimationFrame(u)};u()}let e,c,p;function f(){return e=e||function(){const a=z(),e=C();return{smoothScroll:e.documentElement&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in a||a.DocumentTouch&&e instanceof a.DocumentTouch),passiveListener:function(){let e=!1;try{var t=Object.defineProperty({},"passive",{get(){e=!0}});a.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in a}}()}function o(e){let{swiper:t,runCallbacks:a,direction:s,step:i}=e;var{activeIndex:e,previousIndex:r}=t;let n=s;if(n=n||(r<e?"next":e<r?"prev":"reset"),t.emit("transition"+i),a&&e!==r){if("reset"===n)return t.emit("slideResetTransition"+i);t.emit("slideChangeTransition"+i),"next"===n?t.emit("slideNextTransition"+i):t.emit("slidePrevTransition"+i)}}function u(){var e,t,a=this,{params:s,el:i}=a;i&&0===i.offsetWidth||(s.breakpoints&&a.setBreakpoint(),{allowSlideNext:i,allowSlidePrev:e,snapGrid:t}=a,a.allowSlideNext=!0,a.allowSlidePrev=!0,a.updateSize(),a.updateSlides(),a.updateSlidesClasses(),("auto"===s.slidesPerView||1<s.slidesPerView)&&a.isEnd&&!a.isBeginning&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0),a.autoplay&&a.autoplay.running&&a.autoplay.paused&&a.autoplay.run(),a.allowSlidePrev=e,a.allowSlideNext=i,a.params.watchOverflow&&t!==a.snapGrid&&a.checkOverflow())}Object.keys(a).forEach(e=>{Object.defineProperty(I.fn,e,{value:a[e],writable:!0})});let h=!1;function N(){}const g=(e,t)=>{const a=C(),{params:s,touchEvents:i,el:r,wrapperEl:n,device:l,support:o}=e,d=!!s.nested,c="on"===t?"addEventListener":"removeEventListener",p=t;if(o.touch){const t=!("touchstart"!==i.start||!o.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};r[c](i.start,e.onTouchStart,t),r[c](i.move,e.onTouchMove,o.passiveListener?{passive:!1,capture:d}:d),r[c](i.end,e.onTouchEnd,t),i.cancel&&r[c](i.cancel,e.onTouchEnd,t)}else r[c](i.start,e.onTouchStart,!1),a[c](i.move,e.onTouchMove,d),a[c](i.end,e.onTouchEnd,!1);(s.preventClicks||s.preventClicksPropagation)&&r[c]("click",e.onClick,!0),s.cssMode&&n[c]("scroll",e.onScroll),s.updateOnWindowResize?e[p](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",u,!0):e[p]("observerUpdate",u,!0)},b=(e,t)=>e.grid&&t.grid&&1<t.grid.rows;var y={init:!0,direction:"horizontal",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopedSlidesLimit:!0,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};const x={eventsEmitter:{on(e,t,a){const s=this;if(s.eventsListeners&&!s.destroyed&&"function"==typeof t){const i=a?"unshift":"push";e.split(" ").forEach(e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][i](t)})}return s},once(s,i,e){const r=this;return!r.eventsListeners||r.destroyed||"function"!=typeof i?r:(n.__emitterProxy=i,r.on(s,n,e));function n(){r.off(s,n),n.__emitterProxy&&delete n.__emitterProxy;for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];i.apply(r,t)}},onAny(e,t){var a=this;return a.eventsListeners&&!a.destroyed&&"function"==typeof e&&(t=t?"unshift":"push",a.eventsAnyListeners.indexOf(e)<0&&a.eventsAnyListeners[t](e)),a},offAny(e){var t=this;return t.eventsListeners&&!t.destroyed&&t.eventsAnyListeners&&0<=(e=t.eventsAnyListeners.indexOf(e))&&t.eventsAnyListeners.splice(e,1),t},off(e,s){const i=this;return!i.eventsListeners||i.destroyed||i.eventsListeners&&e.split(" ").forEach(a=>{void 0===s?i.eventsListeners[a]=[]:i.eventsListeners[a]&&i.eventsListeners[a].forEach((e,t)=>{(e===s||e.__emitterProxy&&e.__emitterProxy===s)&&i.eventsListeners[a].splice(t,1)})}),i},emit(){const i=this;if(i.eventsListeners&&!i.destroyed&&i.eventsListeners){let e,a,s;for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];s="string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],a=r.slice(1,r.length),i):(e=r[0].events,a=r[0].data,r[0].context||i),a.unshift(s),(Array.isArray(e)?e:e.split(" ")).forEach(t=>{i.eventsAnyListeners&&i.eventsAnyListeners.length&&i.eventsAnyListeners.forEach(e=>{e.apply(s,[t,...a])}),i.eventsListeners&&i.eventsListeners[t]&&i.eventsListeners[t].forEach(e=>{e.apply(s,a)})})}return i}},update:{updateSize:function(){var e=this;let t,a;const s=e.$el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:s[0].clientWidth,a=void 0!==e.params.height&&null!==e.params.height?e.params.height:s[0].clientHeight,0===t&&e.isHorizontal()||0===a&&e.isVertical()||(t=t-parseInt(s.css("padding-left")||0,10)-parseInt(s.css("padding-right")||0,10),a=a-parseInt(s.css("padding-top")||0,10)-parseInt(s.css("padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(a)&&(a=0),Object.assign(e,{width:t,height:a,size:e.isHorizontal()?t:a}))},updateSlides:function(){const a=this;function s(e){return a.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}function i(e,t){return parseFloat(e.getPropertyValue(s(t))||0)}const r=a.params,{$wrapperEl:n,size:l,rtlTranslate:o,wrongRTL:d}=a,c=a.virtual&&r.virtual.enabled,e=(c?a.virtual:a).slides.length,p=n.children("."+a.params.slideClass),u=(c?a.virtual.slides:p).length;let h=[];const m=[],f=[];let g=r.slidesOffsetBefore,v=("function"==typeof g&&(g=r.slidesOffsetBefore.call(a)),r.slidesOffsetAfter);"function"==typeof v&&(v=r.slidesOffsetAfter.call(a));var w=a.snapGrid.length,b=a.slidesGrid.length;let y=r.spaceBetween,x=-g,E=0,S=0;if(void 0!==l){"string"==typeof y&&0<=y.indexOf("%")&&(y=parseFloat(y.replace("%",""))/100*l),a.virtualSize=-y,o?p.css({marginLeft:"",marginBottom:"",marginTop:""}):p.css({marginRight:"",marginBottom:"",marginTop:""}),r.centeredSlides&&r.cssMode&&(M(a.wrapperEl,"--swiper-centered-offset-before",""),M(a.wrapperEl,"--swiper-centered-offset-after",""));var C=r.grid&&1<r.grid.rows&&a.grid;let t;C&&a.grid.initSlides(u);var T="auto"===r.slidesPerView&&r.breakpoints&&0<Object.keys(r.breakpoints).filter(e=>void 0!==r.breakpoints[e].slidesPerView).length;for(let e=0;e<u;e+=1){t=0;const o=p.eq(e);if(C&&a.grid.updateSlide(e,o,u,s),"none"!==o.css("display")){if("auto"===r.slidesPerView){T&&(p[e].style[s("width")]="");const l=getComputedStyle(o[0]),d=o[0].style.transform,c=o[0].style.webkitTransform;if(d&&(o[0].style.transform="none"),c&&(o[0].style.webkitTransform="none"),r.roundLengths)t=a.isHorizontal()?o.outerWidth(!0):o.outerHeight(!0);else{const a=i(l,"width"),s=i(l,"padding-left"),r=i(l,"padding-right"),n=i(l,"margin-left"),d=i(l,"margin-right"),c=l.getPropertyValue("box-sizing");if(c&&"border-box"===c)t=a+n+d;else{const{clientWidth:i,offsetWidth:l}=o[0];t=a+s+r+n+d+(l-i)}}d&&(o[0].style.transform=d),c&&(o[0].style.webkitTransform=c),r.roundLengths&&(t=Math.floor(t))}else t=(l-(r.slidesPerView-1)*y)/r.slidesPerView,r.roundLengths&&(t=Math.floor(t)),p[e]&&(p[e].style[s("width")]=t+"px");p[e]&&(p[e].swiperSlideSize=t),f.push(t),r.centeredSlides?(x=x+t/2+E/2+y,0===E&&0!==e&&(x=x-l/2-y),0===e&&(x=x-l/2-y),Math.abs(x)<.001&&(x=0),r.roundLengths&&(x=Math.floor(x)),S%r.slidesPerGroup==0&&h.push(x),m.push(x)):(r.roundLengths&&(x=Math.floor(x)),(S-Math.min(a.params.slidesPerGroupSkip,S))%a.params.slidesPerGroup==0&&h.push(x),m.push(x),x=x+t+y),a.virtualSize+=t+y,E=t,S+=1}}if(a.virtualSize=Math.max(a.virtualSize,l)+v,o&&d&&("slide"===r.effect||"coverflow"===r.effect)&&n.css({width:a.virtualSize+r.spaceBetween+"px"}),r.setWrapperSize&&n.css({[s("width")]:a.virtualSize+r.spaceBetween+"px"}),C&&a.grid.updateWrapperSize(t,h,s),!r.centeredSlides){const s=[];for(let t=0;t<h.length;t+=1){let e=h[t];r.roundLengths&&(e=Math.floor(e)),h[t]<=a.virtualSize-l&&s.push(e)}h=s,1<Math.floor(a.virtualSize-l)-Math.floor(h[h.length-1])&&h.push(a.virtualSize-l)}if(0===h.length&&(h=[0]),0!==r.spaceBetween){const i=a.isHorizontal()&&o?"marginLeft":s("marginRight");p.filter((e,t)=>!r.cssMode||t!==p.length-1).css({[i]:y+"px"})}if(r.centeredSlides&&r.centeredSlidesBounds){let t=0;f.forEach(e=>{t+=e+(r.spaceBetween||0)});const s=(t-=r.spaceBetween)-l;h=h.map(e=>e<0?-g:e>s?s+v:e)}if(r.centerInsufficientSlides){let t=0;if(f.forEach(e=>{t+=e+(r.spaceBetween||0)}),(t-=r.spaceBetween)<l){const s=(l-t)/2;h.forEach((e,t)=>{h[t]=e-s}),m.forEach((e,t)=>{m[t]=e+s})}}if(Object.assign(a,{slides:p,snapGrid:h,slidesGrid:m,slidesSizesGrid:f}),r.centeredSlides&&r.cssMode&&!r.centeredSlidesBounds){M(a.wrapperEl,"--swiper-centered-offset-before",-h[0]+"px"),M(a.wrapperEl,"--swiper-centered-offset-after",a.size/2-f[f.length-1]/2+"px");const s=-a.snapGrid[0],i=-a.slidesGrid[0];a.snapGrid=a.snapGrid.map(e=>e+s),a.slidesGrid=a.slidesGrid.map(e=>e+i)}if(u!==e&&a.emit("slidesLengthChange"),h.length!==w&&(a.params.watchOverflow&&a.checkOverflow(),a.emit("snapGridLengthChange")),m.length!==b&&a.emit("slidesGridLengthChange"),r.watchSlidesProgress&&a.updateSlidesOffset(),!(c||r.cssMode||"slide"!==r.effect&&"fade"!==r.effect)){const s=r.containerModifierClass+"backface-hidden",i=a.$el.hasClass(s);u<=r.maxBackfaceHiddenSlides?i||a.$el.addClass(s):i&&a.$el.removeClass(s)}}},updateAutoHeight:function(e){const a=this,t=[],s=a.virtual&&a.params.virtual.enabled;let i,r=0;"number"==typeof e?a.setTransition(e):!0===e&&a.setTransition(a.params.speed);var n=t=>(s?a.slides.filter(e=>parseInt(e.getAttribute("data-swiper-slide-index"),10)===t):a.slides.eq(t))[0];if("auto"!==a.params.slidesPerView&&1<a.params.slidesPerView)if(a.params.centeredSlides)(a.visibleSlides||I([])).each(e=>{t.push(e)});else for(i=0;i<Math.ceil(a.params.slidesPerView);i+=1){const e=a.activeIndex+i;if(e>a.slides.length&&!s)break;t.push(n(e))}else t.push(n(a.activeIndex));for(i=0;i<t.length;i+=1)if(void 0!==t[i]){const e=t[i].offsetHeight;r=e>r?e:r}!r&&0!==r||a.$wrapperEl.css("height",r+"px")},updateSlidesOffset:function(){const t=this.slides;for(let e=0;e<t.length;e+=1)t[e].swiperSlideOffset=this.isHorizontal()?t[e].offsetLeft:t[e].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const s=this,i=s.params,{slides:r,rtlTranslate:n,snapGrid:l}=s;if(0!==r.length){void 0===r[0].swiperSlideOffset&&s.updateSlidesOffset();let a=n?e:-e;r.removeClass(i.slideVisibleClass),s.visibleSlidesIndexes=[],s.visibleSlides=[];for(let t=0;t<r.length;t+=1){const o=r[t];let e=o.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(e-=r[0].swiperSlideOffset);const I=(a+(i.centeredSlides?s.minTranslate():0)-e)/(o.swiperSlideSize+i.spaceBetween),d=(a-l[0]+(i.centeredSlides?s.minTranslate():0)-e)/(o.swiperSlideSize+i.spaceBetween),c=-(a-e),p=c+s.slidesSizesGrid[t];(0<=c&&c<s.size-1||1<p&&p<=s.size||c<=0&&p>=s.size)&&(s.visibleSlides.push(o),s.visibleSlidesIndexes.push(t),r.eq(t).addClass(i.slideVisibleClass)),o.progress=n?-I:I,o.originalProgress=n?-d:d}s.visibleSlides=I(s.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){const a=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*a||0}const a=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:r,isEnd:n}=t;var l=r,o=n;n=0==s?(i=0,r=!0):(i=(e-t.minTranslate())/s,r=i<=0,1<=i),Object.assign(t,{progress:i,isBeginning:r,isEnd:n}),(a.watchSlidesProgress||a.centeredSlides&&a.autoHeight)&&t.updateSlidesProgress(e),r&&!l&&t.emit("reachBeginning toEdge"),n&&!o&&t.emit("reachEnd toEdge"),(l&&!r||o&&!n)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const{slides:e,params:t,$wrapperEl:a,activeIndex:s,realIndex:i}=this,r=this.virtual&&t.virtual.enabled;let n,l=(e.removeClass(`${t.slideActiveClass} ${t.slideNextClass} ${t.slidePrevClass} ${t.slideDuplicateActiveClass} ${t.slideDuplicateNextClass} `+t.slideDuplicatePrevClass),(n=r?this.$wrapperEl.find(`.${t.slideClass}[data-swiper-slide-index="${s}"]`):e.eq(s)).addClass(t.slideActiveClass),t.loop&&(n.hasClass(t.slideDuplicateClass)?a.children(`.${t.slideClass}:not(.${t.slideDuplicateClass})[data-swiper-slide-index="${i}"]`):a.children(`.${t.slideClass}.${t.slideDuplicateClass}[data-swiper-slide-index="${i}"]`)).addClass(t.slideDuplicateActiveClass),n.nextAll("."+t.slideClass).eq(0).addClass(t.slideNextClass)),o=(t.loop&&0===l.length&&(l=e.eq(0)).addClass(t.slideNextClass),n.prevAll("."+t.slideClass).eq(0).addClass(t.slidePrevClass));t.loop&&0===o.length&&(o=e.eq(-1)).addClass(t.slidePrevClass),t.loop&&((l.hasClass(t.slideDuplicateClass)?a.children(`.${t.slideClass}:not(.${t.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`):a.children(`.${t.slideClass}.${t.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`)).addClass(t.slideDuplicateNextClass),(o.hasClass(t.slideDuplicateClass)?a.children(`.${t.slideClass}:not(.${t.slideDuplicateClass})[data-swiper-slide-index="${o.attr("data-swiper-slide-index")}"]`):a.children(`.${t.slideClass}.${t.slideDuplicateClass}[data-swiper-slide-index="${o.attr("data-swiper-slide-index")}"]`)).addClass(t.slideDuplicatePrevClass)),this.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,a=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:s,snapGrid:i,params:r,activeIndex:n,realIndex:l,snapIndex:o}=t;let d,c=e;if(void 0===c){for(let e=0;e<s.length;e+=1)void 0!==s[e+1]?a>=s[e]&&a<s[e+1]-(s[e+1]-s[e])/2?c=e:a>=s[e]&&a<s[e+1]&&(c=e+1):a>=s[e]&&(c=e);r.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if(0<=i.indexOf(a))d=i.indexOf(a);else{const e=Math.min(r.slidesPerGroupSkip,c);d=e+Math.floor((c-e)/r.slidesPerGroup)}d>=i.length&&(d=i.length-1),c===n?d!==o&&(t.snapIndex=d,t.emit("snapIndexChange")):(e=parseInt(t.slides.eq(c).attr("data-swiper-slide-index")||c,10),Object.assign(t,{snapIndex:d,realIndex:e,previousIndex:n,activeIndex:c}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),l!==e&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange"))},updateClickedSlide:function(e){var t=this,a=t.params,s=I(e).closest("."+a.slideClass)[0];let i,r=!1;if(s)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===s){r=!0,i=e;break}s&&r?(t.clickedSlide=s,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(I(s).attr("data-swiper-slide-index"),10):t.clickedIndex=i,a.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()):(t.clickedSlide=void 0,t.clickedIndex=void 0)}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var{params:t,rtlTranslate:a,translate:s,$wrapperEl:i}=this;if(t.virtualTranslate)return a?-s:s;if(t.cssMode)return s;let r=O(i[0],e);return(r=a?-r:r)||0},setTranslate:function(e,t){const a=this,{rtlTranslate:s,params:i,$wrapperEl:r,wrapperEl:n,progress:l}=a;let o=0,d=0;a.isHorizontal()?o=s?-e:e:d=e,i.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),i.cssMode?n[a.isHorizontal()?"scrollLeft":"scrollTop"]=a.isHorizontal()?-o:-d:i.virtualTranslate||r.transform(`translate3d(${o}px, ${d}px, 0px)`),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?o:d;var c=a.maxTranslate()-a.minTranslate();(0==c?0:(e-a.minTranslate())/c)!==l&&a.updateProgress(e),a.emit("setTranslate",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,a,s,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),void 0===s&&(s=!0);const r=this,{params:n,wrapperEl:l}=r;if(r.animating&&n.preventInteractionOnTransition)return!1;var o=r.minTranslate(),d=r.maxTranslate(),o=s&&o<e?o:s&&e<d?d:e;if(r.updateProgress(o),n.cssMode){const e=r.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-o;else{if(!r.support.smoothScroll)return w({swiper:r,targetPosition:-o,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-o,behavior:"smooth"})}}else 0===t?(r.setTransition(0),r.setTranslate(o),a&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(o),a&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,a&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd)));return!0}},transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this["params"];a.cssMode||(a.autoHeight&&this.updateAutoHeight(),o({swiper:this,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this["params"];this.animating=!1,a.cssMode||(this.setTransition(0),o({swiper:this,runCallbacks:e,direction:t,step:"End"}))}},slide:{slideTo:function(e,t,a,s,i){if(void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),"number"!=typeof(e=void 0===e?0:e)&&"string"!=typeof e)throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof e}] given.`);if("string"==typeof e){const t=parseInt(e,10);if(!isFinite(t))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${e}] given.`);e=t}const r=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:h,enabled:m}=r;if(r.animating&&l.preventInteractionOnTransition||!m&&!s&&!i)return!1;e=Math.min(r.params.slidesPerGroupSkip,n);let f=e+Math.floor((n-e)/r.params.slidesPerGroup);var g=-o[f=f>=o.length?o.length-1:f];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*g),a=Math.floor(100*d[e]),s=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=a&&t<s-(s-a)/2?n=e:t>=a&&t<s&&(n=e+1):t>=a&&(n=e)}if(r.initialized&&n!==p){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(p||0)!==n)return!1}let v;if(n!==(c||0)&&a&&r.emit("beforeSlideChangeStart"),r.updateProgress(g),v=n>p?"next":n<p?"prev":"reset",u&&-g===r.translate||!u&&g===r.translate)return r.updateActiveIndex(n),l.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==l.effect&&r.setTranslate(g),"reset"!=v&&(r.transitionStart(a,v),r.transitionEnd(a,v)),!1;if(l.cssMode){const e=r.isHorizontal(),a=u?g:-g;if(0===t){const t=r.virtual&&r.params.virtual.enabled;t&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),h[e?"scrollLeft":"scrollTop"]=a,t&&requestAnimationFrame(()=>{r.wrapperEl.style.scrollSnapType="",r._swiperImmediateVirtual=!1})}else{if(!r.support.smoothScroll)return w({swiper:r,targetPosition:a,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:a,behavior:"smooth"})}}else r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,s),r.transitionStart(a,v),0===t?r.transitionEnd(a,v):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(a,v))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd));return!0},slideToLoop:function(e,t,a,s){if(void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),"string"==typeof(e=void 0===e?0:e)){const t=parseInt(e,10);if(!isFinite(t))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${e}] given.`);e=t}let i=e;return this.params.loop&&(i+=this.loopedSlides),this.slideTo(i,t,a,s)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this,{animating:i,enabled:r,params:n}=s;if(!r)return s;let l=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(l=Math.max(s.slidesPerViewDynamic("current",!0),1));r=s.activeIndex<n.slidesPerGroupSkip?1:l;if(n.loop){if(i&&n.loopPreventsSlide)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}return n.rewind&&s.isEnd?s.slideTo(0,e,t,a):s.slideTo(s.activeIndex+r,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const s=this,{params:i,animating:r,snapGrid:n,slidesGrid:l,rtlTranslate:o,enabled:d}=s;if(!d)return s;if(i.loop){if(r&&i.loopPreventsSlide)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=c(o?s.translate:-s.translate),u=n.map(e=>c(e));let h=n[u.indexOf(p)-1];if(void 0===h&&i.cssMode){let a;n.forEach((e,t)=>{p>=e&&(a=t)}),void 0!==a&&(h=n[0<a?a-1:a])}let m=0;if(void 0!==h&&((m=l.indexOf(h))<0&&(m=s.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(m=m-s.slidesPerViewDynamic("previous",!0)+1,m=Math.max(m,0))),i.rewind&&s.isBeginning){const i=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(i,e,t,a)}return s.slideTo(m,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),this.slideTo(this.activeIndex,e,t=void 0===t?!0:t,a)},slideToClosest:function(e,t,a,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===s&&(s=.5);var i=this;let r=i.activeIndex;var n=Math.min(i.params.slidesPerGroupSkip,r),n=n+Math.floor((r-n)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;if(l>=i.snapGrid[n]){const e=i.snapGrid[n];l-e>(i.snapGrid[n+1]-e)*s&&(r+=i.params.slidesPerGroup)}else{const e=i.snapGrid[n-1];l-e<=(i.snapGrid[n]-e)*s&&(r-=i.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,i.slidesGrid.length-1),i.slideTo(r,e,t,a)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:a}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,r=e.clickedIndex;t.loop?e.animating||(i=parseInt(I(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-s/2||r>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),r=a.children(`.${t.slideClass}[data-swiper-slide-index="${i}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),T(()=>{e.slideTo(r)})):e.slideTo(r):r>e.slides.length-s?(e.loopFix(),r=a.children(`.${t.slideClass}[data-swiper-slide-index="${i}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),T(()=>{e.slideTo(r)})):e.slideTo(r)):e.slideTo(r)}},loop:{loopCreate:function(){const t=this,a=C(),{params:s,$wrapperEl:e}=t,i=0<e.children().length?I(e.children()[0].parentNode):e;i.children(`.${s.slideClass}.`+s.slideDuplicateClass).remove();let r=i.children("."+s.slideClass);if(s.loopFillGroupWithBlank){const t=s.slidesPerGroup-r.length%s.slidesPerGroup;if(t!==s.slidesPerGroup){for(let e=0;e<t;e+=1){const t=I(a.createElement("div")).addClass(s.slideClass+" "+s.slideBlankClass);i.append(t)}r=i.children("."+s.slideClass)}}"auto"!==s.slidesPerView||s.loopedSlides||(s.loopedSlides=r.length),t.loopedSlides=Math.ceil(parseFloat(s.loopedSlides||s.slidesPerView,10)),t.loopedSlides+=s.loopAdditionalSlides,t.loopedSlides>r.length&&t.params.loopedSlidesLimit&&(t.loopedSlides=r.length);const n=[],l=[];r.each((e,t)=>{I(e).attr("data-swiper-slide-index",t)});for(let e=0;e<t.loopedSlides;e+=1){const t=e-Math.floor(e/r.length)*r.length;l.push(r.eq(t)[0]),n.unshift(r.eq(r.length-t-1)[0])}for(let e=0;e<l.length;e+=1)i.append(I(l[e].cloneNode(!0)).addClass(s.slideDuplicateClass));for(let e=n.length-1;0<=e;--e)i.prepend(I(n[e].cloneNode(!0)).addClass(s.slideDuplicateClass))},loopFix:function(){var e=this,{activeIndex:t,slides:a,loopedSlides:s,allowSlidePrev:i,allowSlideNext:r,snapGrid:n,rtlTranslate:l}=(e.emit("beforeLoopFix"),e);let o;e.allowSlidePrev=!0,e.allowSlideNext=!0;n=-n[t]-e.getTranslate();t<s?(o=a.length-3*s+t,o+=s,e.slideTo(o,0,!1,!0)&&0!=n&&e.setTranslate((l?-e.translate:e.translate)-n)):t>=a.length-s&&(o=-a.length+t+s,o+=s,e.slideTo(o,0,!1,!0)&&0!=n&&e.setTranslate((l?-e.translate:e.translate)-n)),e.allowSlidePrev=i,e.allowSlideNext=r,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:a}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.`+t.slideBlankClass).remove(),a.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){const a="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;a.style.cursor="move",a.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="")}},events:{attachEvents:function(){const e=this,t=C(),{params:a,support:s}=e;e.onTouchStart=function(e){const s=this,i=C(),r=z(),n=s.touchEventsData,{params:l,touches:o,enabled:t}=s;if(t&&(!s.animating||!l.preventInteractionOnTransition)){!s.animating&&l.cssMode&&l.loop&&s.loopFix();let t=e,a=I((t=t.originalEvent?t.originalEvent:t).target);if(("wrapper"!==l.touchEventsTarget||a.closest(s.wrapperEl).length)&&(n.isTouchEvent="touchstart"===t.type,(n.isTouchEvent||!("which"in t)||3!==t.which)&&!(!n.isTouchEvent&&"button"in t&&0<t.button||n.isTouched&&n.isMoved))){var d=!!l.noSwipingClass&&""!==l.noSwipingClass,c=e.composedPath?e.composedPath():e.path,d=(d&&t.target&&t.target.shadowRoot&&c&&(a=I(c[0])),l.noSwipingSelector||"."+l.noSwipingClass),c=!(!t.target||!t.target.shadowRoot);if(l.noSwiping&&(c?function(s,e){return function e(t){if(!t||t===C()||t===z())return null;var a=(t=t.assignedSlot?t.assignedSlot:t).closest(s);return a||t.getRootNode?a||e(t.getRootNode().host):null}(e=void 0===e?this:e)}(d,a[0]):a.closest(d)[0]))s.allowClick=!0;else if(!l.swipeHandler||a.closest(l.swipeHandler)[0]){o.currentX=("touchstart"===t.type?t.targetTouches[0]:t).pageX,o.currentY=("touchstart"===t.type?t.targetTouches[0]:t).pageY;var c=o.currentX,d=o.currentY,p=l.edgeSwipeDetection||l.iOSEdgeSwipeDetection,u=l.edgeSwipeThreshold||l.iOSEdgeSwipeThreshold;if(p&&(c<=u||c>=r.innerWidth-u)){if("prevent"!==p)return;e.preventDefault()}if(Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=c,o.startY=d,n.touchStartTime=v(),s.allowClick=!0,s.updateSize(),s.swipeDirection=void 0,0<l.threshold&&(n.allowThresholdMove=!1),"touchstart"!==t.type){let e=!0;a.is(n.focusableElements)&&(e=!1,"SELECT"===a[0].nodeName&&(n.isTouched=!1)),i.activeElement&&I(i.activeElement).is(n.focusableElements)&&i.activeElement!==a[0]&&i.activeElement.blur();const C=e&&s.allowTouchMove&&l.touchStartPreventDefault;!l.touchStartForcePreventDefault&&!C||a[0].isContentEditable||t.preventDefault()}s.params.freeMode&&s.params.freeMode.enabled&&s.freeMode&&s.animating&&!l.cssMode&&s.freeMode.onTouchStart(),s.emit("touchStart",t)}}}}.bind(e),e.onTouchMove=function(e){const t=C(),i=this,r=i.touchEventsData,{params:n,touches:l,rtlTranslate:o,enabled:a}=i;if(a){let s=e;if(s.originalEvent&&(s=s.originalEvent),r.isTouched){if(!r.isTouchEvent||"touchmove"===s.type){var e="touchmove"===s.type&&s.targetTouches&&(s.targetTouches[0]||s.changedTouches[0]),d=("touchmove"===s.type?e:s).pageX,e=("touchmove"===s.type?e:s).pageY;if(s.preventedByNestedSwiper)l.startX=d,l.startY=e;else if(i.allowTouchMove){if(r.isTouchEvent&&n.touchReleaseOnEdges&&!n.loop)if(i.isVertical()){if(e<l.startY&&i.translate<=i.maxTranslate()||e>l.startY&&i.translate>=i.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(d<l.startX&&i.translate<=i.maxTranslate()||d>l.startX&&i.translate>=i.minTranslate())return;if(r.isTouchEvent&&t.activeElement&&s.target===t.activeElement&&I(s.target).is(r.focusableElements))r.isMoved=!0,i.allowClick=!1;else if(r.allowTouchCallbacks&&i.emit("touchMove",s),!(s.targetTouches&&1<s.targetTouches.length)){l.currentX=d,l.currentY=e;var c,p=l.currentX-l.startX,u=l.currentY-l.startY;if(!(i.params.threshold&&Math.sqrt(p**2+u**2)<i.params.threshold))if(void 0===r.isScrolling&&(i.isHorizontal()&&l.currentY===l.startY||i.isVertical()&&l.currentX===l.startX?r.isScrolling=!1:25<=p*p+u*u&&(c=180*Math.atan2(Math.abs(u),Math.abs(p))/Math.PI,r.isScrolling=i.isHorizontal()?c>n.touchAngle:90-c>n.touchAngle)),r.isScrolling&&i.emit("touchMoveOpposite",s),void 0!==r.startMoving||l.currentX===l.startX&&l.currentY===l.startY||(r.startMoving=!0),r.isScrolling)r.isTouched=!1;else if(r.startMoving){i.allowClick=!1,!n.cssMode&&s.cancelable&&s.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&s.stopPropagation(),r.isMoved||(n.loop&&!n.cssMode&&i.loopFix(),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),r.allowMomentumBounce=!1,!n.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",s)),i.emit("sliderMove",s),r.isMoved=!0;let e=i.isHorizontal()?p:u,t=(l.diff=e,e*=n.touchRatio,o&&(e=-e),i.swipeDirection=0<e?"prev":"next",r.currentTranslate=e+r.startTranslate,!0),a=n.resistanceRatio;if(n.touchReleaseOnEdges&&(a=0),0<e&&r.currentTranslate>i.minTranslate()?(t=!1,n.resistance&&(r.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+r.startTranslate+e)**a)):e<0&&r.currentTranslate<i.maxTranslate()&&(t=!1,n.resistance&&(r.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-r.startTranslate-e)**a)),t&&(s.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),i.allowSlidePrev||i.allowSlideNext||(r.currentTranslate=r.startTranslate),0<n.threshold){if(!(Math.abs(e)>n.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,l.startX=l.currentX,l.startY=l.currentY,r.currentTranslate=r.startTranslate,void(l.diff=i.isHorizontal()?l.currentX-l.startX:l.currentY-l.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&i.freeMode||n.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),i.params.freeMode&&n.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}}}else I(s.target).is(r.focusableElements)||(i.allowClick=!1),r.isTouched&&(Object.assign(l,{startX:d,startY:e,currentX:d,currentY:e}),r.touchStartTime=v())}}else r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",s)}}.bind(e),e.onTouchEnd=function(r){const n=this,e=n.touchEventsData,{params:l,touches:t,rtlTranslate:a,slidesGrid:o,enabled:s}=n;if(s){let i=r;if(i.originalEvent&&(i=i.originalEvent),e.allowTouchCallbacks&&n.emit("touchEnd",i),e.allowTouchCallbacks=!1,e.isTouched){l.grabCursor&&e.isMoved&&e.isTouched&&(!0===n.allowSlideNext||!0===n.allowSlidePrev)&&n.setGrabCursor(!1);var d,c=v(),p=c-e.touchStartTime;if(n.allowClick){const r=i.path||i.composedPath&&i.composedPath();n.updateClickedSlide(r&&r[0]||i.target),n.emit("tap click",i),p<300&&c-e.lastClickTime<300&&n.emit("doubleTap doubleClick",i)}if(e.lastClickTime=v(),T(()=>{n.destroyed||(n.allowClick=!0)}),e.isTouched&&e.isMoved&&n.swipeDirection&&0!==t.diff&&e.currentTranslate!==e.startTranslate){if(e.isTouched=!1,e.isMoved=!1,e.startMoving=!1,d=l.followFinger?a?n.translate:-n.translate:-e.currentTranslate,!l.cssMode)if(n.params.freeMode&&l.freeMode.enabled)n.freeMode.onTouchEnd({currentPos:d});else{let t=0,a=n.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<l.slidesPerGroupSkip?1:l.slidesPerGroup){const n=e<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;void 0!==o[e+n]?d>=o[e]&&d<o[e+n]&&(t=e,a=o[e+n]-o[e]):d>=o[e]&&(t=e,a=o[o.length-1]-o[o.length-2])}let e=null,s=null;l.rewind&&(n.isBeginning?s=n.params.virtual&&n.params.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1:n.isEnd&&(e=0));r=(d-o[t])/a,c=t<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;p>l.longSwipesMs?l.longSwipes?("next"===n.swipeDirection&&(r>=l.longSwipesRatio?n.slideTo(l.rewind&&n.isEnd?e:t+c):n.slideTo(t)),"prev"===n.swipeDirection&&(r>1-l.longSwipesRatio?n.slideTo(t+c):null!==s&&r<0&&Math.abs(r)>l.longSwipesRatio?n.slideTo(s):n.slideTo(t))):n.slideTo(n.activeIndex):l.shortSwipes?!n.navigation||i.target!==n.navigation.nextEl&&i.target!==n.navigation.prevEl?("next"===n.swipeDirection&&n.slideTo(null!==e?e:t+c),"prev"===n.swipeDirection&&n.slideTo(null!==s?s:t)):i.target===n.navigation.nextEl?n.slideTo(t+c):n.slideTo(t):n.slideTo(n.activeIndex)}}else e.isTouched=!1,e.isMoved=!1,e.startMoving=!1}else e.isMoved&&l.grabCursor&&n.setGrabCursor(!1),e.isMoved=!1,e.startMoving=!1}}.bind(e),a.cssMode&&(e.onScroll=function(){var e=this,{wrapperEl:t,rtlTranslate:a,enabled:s}=e;s&&(e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses(),(0==(s=e.maxTranslate()-e.minTranslate())?0:(e.translate-e.minTranslate())/s)!==e.progress&&e.updateProgress(a?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1))}.bind(e)),e.onClick=function(e){var t=this;t.enabled&&!t.allowClick&&(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e),s.touch&&!h&&(t.addEventListener("touchstart",N),h=!0),g(e,"on")},detachEvents:function(){g(this,"off")}},breakpoints:{setBreakpoint:function(){const s=this,{activeIndex:e,initialized:t,loopedSlides:a=0,params:i,$el:r}=s,n=i.breakpoints;if(n&&0!==Object.keys(n).length){var l=s.getBreakpoint(n,s.params.breakpointsBase,s.el);if(l&&s.currentBreakpoint!==l){const c=(l in n?n[l]:void 0)||s.originalParams,p=b(s,i),u=b(s,c),h=i.enabled;p&&!u?(r.removeClass(`${i.containerModifierClass}grid ${i.containerModifierClass}grid-column`),s.emitContainerClasses()):!p&&u&&(r.addClass(i.containerModifierClass+"grid"),(c.grid.fill&&"column"===c.grid.fill||!c.grid.fill&&"column"===i.grid.fill)&&r.addClass(i.containerModifierClass+"grid-column"),s.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach(e=>{var t=i[e]&&i[e].enabled,a=c[e]&&c[e].enabled;t&&!a&&s[e].disable(),!t&&a&&s[e].enable()});var o=c.direction&&c.direction!==i.direction,d=i.loop&&(c.slidesPerView!==i.slidesPerView||o),o=(o&&t&&s.changeDirection(),m(s.params,c),s.params.enabled);Object.assign(s,{allowTouchMove:s.params.allowTouchMove,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev}),h&&!o?s.disable():!h&&o&&s.enable(),s.currentBreakpoint=l,s.emit("_beforeBreakpoint",c),d&&t&&(s.loopDestroy(),s.loopCreate(),s.updateSlides(),s.slideTo(e-a+s.loopedSlides,0,!1)),s.emit("breakpoint",c)}}},getBreakpoint:function(e,a,s){if(void 0===a&&(a="window"),e&&("container"!==a||s)){let t=!1;const i=z(),r="window"===a?i.innerHeight:s.clientHeight,n=Object.keys(e).map(e=>{var t;return"string"==typeof e&&0===e.indexOf("@")?(t=parseFloat(e.substr(1)),{value:r*t,point:e}):{value:e,point:e}});n.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<n.length;e+=1){const{point:z,value:r}=n[e];"window"===a?i.matchMedia(`(min-width: ${r}px)`).matches&&(t=z):r<=s.clientWidth&&(t=z)}return t||"max"}}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:a}=e,s=a["slidesOffsetBefore"];if(s){const t=e.slides.length-1,a=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*s;e.isLocked=e.size>a}else e.isLocked=1===e.snapGrid.length;!0===a.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===a.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:a,$el:s,device:i,support:r}=this,n=function(e,a){const s=[];return e.forEach(t=>{"object"==typeof t?Object.keys(t).forEach(e=>{t[e]&&s.push(a+e)}):"string"==typeof t&&s.push(a+t)}),s}(["initialized",t.direction,{"pointer-events":!r.touch},{"free-mode":this.params.freeMode&&t.freeMode.enabled},{autoheight:t.autoHeight},{rtl:a},{grid:t.grid&&1<t.grid.rows},{"grid-column":t.grid&&1<t.grid.rows&&"column"===t.grid.fill},{android:i.android},{ios:i.ios},{"css-mode":t.cssMode},{centered:t.cssMode&&t.centeredSlides},{"watch-progress":t.watchSlidesProgress}],t.containerModifierClass);e.push(...n),s.addClass([...e].join(" ")),this.emitContainerClasses()},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" ")),this.emitContainerClasses()}},images:{loadImage:function(e,t,a,s,i,r){const n=z();let l;function o(){r&&r()}!(I(e).parent("picture")[0]||e.complete&&i)&&t?((l=new n.Image).onload=o,l.onerror=o,s&&(l.sizes=s),a&&(l.srcset=a),t&&(l.src=t)):o()},preloadImages:function(){const t=this;function a(){null!=t&&t&&!t.destroyed&&(void 0!==t.imagesLoaded&&(t.imagesLoaded+=1),t.imagesLoaded===t.imagesToLoad.length&&(t.params.updateOnImagesReady&&t.update(),t.emit("imagesReady")))}t.imagesToLoad=t.$el.find("img");for(let e=0;e<t.imagesToLoad.length;e+=1){const s=t.imagesToLoad[e];t.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,a)}}}},E={};class S{constructor(){let t,a;for(var h,e=arguments.length,s=new Array(e),i=0;i<e;i++)s[i]=arguments[i];if(1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?a=s[0]:[t,a]=s,a=m({},a=a||{}),t&&!a.el&&(a.el=t),a.el&&1<I(a.el).length){const t=[];return I(a.el).each(e=>{e=m({},a,{el:e});t.push(new S(e))}),t}const r=this,n=(r.__swiper__=!0,r.support=f(),r.device=(void 0===(h={userAgent:a.userAgent})&&(h={}),c=c||function(){var e=(void 0===h?{}:h)["userAgent"];const t=f(),a=z(),s=a.navigator.platform,i=e||a.navigator.userAgent,r={ios:!1,android:!1},n=a.screen.width,l=a.screen.height,o=i.match(/(Android);?[\s\/]+([\d.]+)?/);let d=i.match(/(iPad).*OS\s([\d_]+)/);var e=i.match(/(iPod)(.*OS\s([\d_]+))?/),c=!d&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===s;let u="MacIntel"===s;return!d&&u&&t.touch&&0<=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(n+"x"+l)&&(d=(d=i.match(/(Version)\/([\d.]+)/))||[0,1,"13_0_0"],u=!1),o&&!p&&(r.os="android",r.android=!0),(d||c||e)&&(r.os="ios",r.ios=!0),r}()),r.browser=p=p||function(){const t=z();return{isSafari:function(){const e=t.navigator.userAgent.toLowerCase();return 0<=e.indexOf("safari")&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}(),r.eventsListeners={},r.eventsAnyListeners=[],r.modules=[...r.__modules__],a.modules&&Array.isArray(a.modules)&&r.modules.push(...a.modules),{});r.modules.forEach(e=>{var s,i;e({swiper:r,extendParams:(s=a,i=n,function(e){void 0===e&&(e={});var t=Object.keys(e)[0],a=e[t];"object"==typeof a&&null!==a&&(0<=["navigation","pagination","scrollbar"].indexOf(t)&&!0===s[t]&&(s[t]={auto:!0}),t in s&&"enabled"in a&&(!0===s[t]&&(s[t]={enabled:!0}),"object"!=typeof s[t]||"enabled"in s[t]||(s[t].enabled=!0),s[t]||(s[t]={enabled:!1}))),m(i,e)}),on:r.on.bind(r),once:r.once.bind(r),off:r.off.bind(r),emit:r.emit.bind(r)})});var l,o=m({},y,n);return r.params=m({},o,E,a),r.originalParams=m({},r.params),r.passedParams=m({},a),r.params&&r.params.on&&Object.keys(r.params.on).forEach(e=>{r.on(e,r.params.on[e])}),r.params&&r.params.onAny&&r.onAny(r.params.onAny),r.$=I,Object.assign(r,{enabled:r.params.enabled,el:t,classNames:[],slides:I(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===r.params.direction,isVertical:()=>"vertical"===r.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:(o=["touchstart","touchmove","touchend","touchcancel"],l=["pointerdown","pointermove","pointerup"],r.touchEventsTouch={start:o[0],move:o[1],end:o[2],cancel:o[3]},r.touchEventsDesktop={start:l[0],move:l[1],end:l[2]},r.support.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:r.params.focusableElements,lastClickTime:v(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.emit("_swiper"),r.params.init&&r.init(),r}enable(){var e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){var e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){var a=this,s=(e=Math.min(Math.max(e,0),1),a.minTranslate()),e=(a.maxTranslate()-s)*e+s;a.translateTo(e,void 0===t?0:t),a.updateActiveIndex(),a.updateSlidesClasses()}emitContainerClasses(){const t=this;if(t.params._emitClasses&&t.el){const e=t.el.className.split(" ").filter(e=>0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass));t.emit("_containerClasses",e.join(" "))}}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter(e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)).join(" ")}emitSlidesClasses(){const a=this;if(a.params._emitClasses&&a.el){const s=[];a.slides.each(e=>{var t=a.getSlideClasses(e);s.push({slideEl:e,classNames:t}),a.emit("_slideClass",e,t)}),a.emit("_slideClasses",s)}}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);var{params:a,slides:s,slidesGrid:i,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if(a.centeredSlides){let t,a=s[l].swiperSlideSize;for(let e=l+1;e<s.length;e+=1)s[e]&&!t&&(a+=s[e].swiperSlideSize,o+=1,a>n&&(t=!0));for(let e=l-1;0<=e;--e)s[e]&&!t&&(a+=s[e].swiperSlideSize,o+=1,a>n&&(t=!0))}else if("current"===e)for(let e=l+1;e<s.length;e+=1)(t?i[e]+r[e]-i[l]<n:i[e]-i[l]<n)&&(o+=1);else for(let e=l-1;0<=e;--e)i[l]-i[e]<n&&(o+=1);return o}update(){const t=this;var e,a;function s(){var e=t.rtlTranslate?-1*t.translate:t.translate,e=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(e),t.updateActiveIndex(),t.updateSlidesClasses()}t&&!t.destroyed&&({snapGrid:e,params:a}=t,a.breakpoints&&t.setBreakpoint(),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.params.freeMode&&t.params.freeMode.enabled?(s(),t.params.autoHeight&&t.updateAutoHeight()):(("auto"===t.params.slidesPerView||1<t.params.slidesPerView)&&t.isEnd&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0))||s(),a.watchOverflow&&e!==t.snapGrid&&t.checkOverflow(),t.emit("update"))}changeDirection(t,e){void 0===e&&(e=!0);var a=this,s=a.params.direction;return(t=t||("horizontal"===s?"vertical":"horizontal"))===s||"horizontal"!==t&&"vertical"!==t||(a.$el.removeClass(""+a.params.containerModifierClass+s).addClass(""+a.params.containerModifierClass+t),a.emitContainerClasses(),a.params.direction=t,a.slides.each(e=>{"vertical"===t?e.style.width="":e.style.height=""}),a.emit("changeDirection"),e&&a.update()),a}changeLanguageDirection(e){var t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.$el.addClass(t.params.containerModifierClass+"rtl"),t.el.dir="rtl"):(t.$el.removeClass(t.params.containerModifierClass+"rtl"),t.el.dir="ltr"),t.update())}mount(a){const e=this;if(!e.mounted){const s=I(a||e.params.el);if(!(a=s[0]))return!1;a.swiper=e;const i=()=>"."+(e.params.wrapperClass||"").trim().split(" ").join(".");let t=(()=>{if(a&&a.shadowRoot&&a.shadowRoot.querySelector){const e=I(a.shadowRoot.querySelector(i()));return e.children=e=>s.children(e),e}return(s.children?s:I(s)).children(i())})();if(0===t.length&&e.params.createElements){const a=C().createElement("div");t=I(a),a.className=e.params.wrapperClass,s.append(a),s.children("."+e.params.slideClass).each(e=>{t.append(e)})}Object.assign(e,{$el:s,el:a,$wrapperEl:t,wrapperEl:t[0],mounted:!0,rtl:"rtl"===a.dir.toLowerCase()||"rtl"===s.css("direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===a.dir.toLowerCase()||"rtl"===s.css("direction")),wrongRTL:"-webkit-box"===t.css("display")})}return!0}init(e){var t=this;return t.initialized||!1!==t.mount(e)&&(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const a=this,{params:s,$el:i,$wrapperEl:r,slides:n}=a;if(void 0!==a.params&&!a.destroyed){if(a.emit("beforeDestroy"),a.initialized=!1,a.detachEvents(),s.loop&&a.loopDestroy(),t&&(a.removeClasses(),i.removeAttr("style"),r.removeAttr("style"),n&&n.length&&n.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),a.emit("destroy"),Object.keys(a.eventsListeners).forEach(e=>{a.off(e)}),!1!==e){a.$el[0].swiper=null;{const l=a;Object.keys(l).forEach(e=>{try{l[e]=null}catch(e){}try{delete l[e]}catch(e){}})}}a.destroyed=!0}return null}static extendDefaults(e){m(E,e)}static get extendedDefaults(){return E}static get defaults(){return y}static installModule(e){S.prototype.__modules__||(S.prototype.__modules__=[]);const t=S.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?e.forEach(e=>S.installModule(e)):S.installModule(e),S}}function $(a,s,i,r){const n=C();return a.params.createElements&&Object.keys(r).forEach(t=>{if(!i[t]&&!0===i.auto){let e=a.$el.children("."+r[t])[0];e||((e=n.createElement("div")).className=r[t],a.$el.append(e)),i[t]=e,s[t]=e}}),i}function P(e){return"."+(e=void 0===e?"":e).trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}function k(e){const{effect:a,swiper:s,on:t,setTranslate:i,setTransition:r,overwriteParams:n,perspective:l,recreateShadows:o,getEffectParams:d}=e;let c;t("beforeInit",()=>{var e;s.params.effect===a&&(s.classNames.push(""+s.params.containerModifierClass+a),l&&l()&&s.classNames.push(s.params.containerModifierClass+"3d"),e=n?n():{},Object.assign(s.params,e),Object.assign(s.originalParams,e))}),t("setTranslate",()=>{s.params.effect===a&&i()}),t("setTransition",(e,t)=>{s.params.effect===a&&r(t)}),t("transitionEnd",()=>{s.params.effect===a&&o&&d&&d().slideShadows&&(s.slides.each(e=>{s.$(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").remove()}),o())}),t("virtualUpdate",()=>{s.params.effect===a&&(s.slides.length||(c=!0),requestAnimationFrame(()=>{c&&s.slides&&s.slides.length&&(i(),c=!1)}))})}function L(e,t){return e.transformEl?t.find(e.transformEl).css({"backface-visibility":"hidden","-webkit-backface-visibility":"hidden"}):t}function A(e){let{swiper:s,duration:t,transformEl:i,allSlides:r}=e;const{slides:n,activeIndex:l,$wrapperEl:o}=s;if(s.params.virtualTranslate&&0!==t){let e,a=!1;(e=r?i?n.find(i):n:i?n.eq(l).find(i):n.eq(l)).transitionEnd(()=>{if(!a&&s&&!s.destroyed){a=!0,s.animating=!1;var t=["webkitTransitionEnd","transitionend"];for(let e=0;e<t.length;e+=1)o.trigger(t[e])}})}}function _(e,t,a){const s="swiper-slide-shadow"+(a?"-"+a:""),i=e.transformEl?t.find(e.transformEl):t;let r=i.children("."+s);return r.length||(r=I(`<div class="swiper-slide-shadow${a?"-"+a:""}"></div>`),i.append(r)),r}return Object.keys(x).forEach(t=>{Object.keys(x[t]).forEach(e=>{S.prototype[e]=x[t][e]})}),S.use([function(e){let{swiper:r,on:t,emit:a}=e;const s=z();let i=null,n=null;const l=()=>{r&&!r.destroyed&&r.initialized&&(a("beforeResize"),a("resize"))},o=()=>{r&&!r.destroyed&&r.initialized&&a("orientationchange")};t("init",()=>{r.params.resizeObserver&&void 0!==s.ResizeObserver?r&&!r.destroyed&&r.initialized&&(i=new ResizeObserver(a=>{n=s.requestAnimationFrame(()=>{var{width:e,height:t}=r;let s=e,i=t;a.forEach(e=>{var{contentBoxSize:e,contentRect:t,target:a}=e;a&&a!==r.el||(s=t?t.width:(e[0]||e).inlineSize,i=t?t.height:(e[0]||e).blockSize)}),s===e&&i===t||l()})})).observe(r.el):(s.addEventListener("resize",l),s.addEventListener("orientationchange",o))}),t("destroy",()=>{n&&s.cancelAnimationFrame(n),i&&i.unobserve&&r.el&&(i.unobserve(r.el),i=null),s.removeEventListener("resize",l),s.removeEventListener("orientationchange",o)})},function(e){let{swiper:a,extendParams:t,on:s,emit:i}=e;function r(e,t){void 0===t&&(t={});const a=new(l.MutationObserver||l.WebkitMutationObserver)(e=>{var t;1===e.length?i("observerUpdate",e[0]):(t=function(){i("observerUpdate",e[0])},l.requestAnimationFrame?l.requestAnimationFrame(t):l.setTimeout(t,0))});a.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.push(a)}const n=[],l=z();t({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",()=>{if(a.params.observer){if(a.params.observeParents){var t=a.$el.parents();for(let e=0;e<t.length;e+=1)r(t[e])}r(a.$el[0],{childList:a.params.observeSlideChildren}),r(a.$wrapperEl[0],{attributes:!1})}}),s("destroy",()=>{n.forEach(e=>{e.disconnect()}),n.splice(0,n.length)})}]),S.use([function(e){let t,{swiper:x,extendParams:a,on:s,emit:E}=e;function S(e,t){const a=x.params.virtual;if(a.cache&&x.virtual.cache[t])return x.virtual.cache[t];const s=a.renderSlide?I(a.renderSlide.call(x,e,t)):I(`<div class="${x.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),a.cache&&(x.virtual.cache[t]=s),s}function n(t){const{slidesPerView:e,slidesPerGroup:a,centeredSlides:s}=x.params,{addSlidesBefore:i,addSlidesAfter:r}=x.params.virtual,{from:n,to:l,slides:o,slidesGrid:d,offset:c}=x.virtual;x.params.cssMode||x.updateActiveIndex();var p=x.activeIndex||0;let u,h,m;u=x.rtlTranslate?"right":x.isHorizontal()?"left":"top",m=s?(h=Math.floor(e/2)+a+r,Math.floor(e/2)+a+i):(h=e+(a-1)+r,a+i);const f=Math.max((p||0)-m,0),g=Math.min((p||0)+h,o.length-1),v=(x.slidesGrid[f]||0)-(x.slidesGrid[0]||0);function w(){x.updateSlides(),x.updateProgress(),x.updateSlidesClasses(),x.lazy&&x.params.lazy.enabled&&x.lazy.load(),E("virtualUpdate")}if(Object.assign(x.virtual,{from:f,to:g,offset:v,slidesGrid:x.slidesGrid}),n!==f||l!==g||t)if(x.params.virtual.renderExternal)x.params.virtual.renderExternal.call(x,{offset:v,from:f,to:g,slides:function(){const t=[];for(let e=f;e<=g;e+=1)t.push(o[e]);return t}()}),x.params.virtual.renderExternalUpdate?w():E("virtualUpdate");else{const b=[],y=[];if(t)x.$wrapperEl.find("."+x.params.slideClass).remove();else for(let e=n;e<=l;e+=1)(e<f||e>g)&&x.$wrapperEl.find(`.${x.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let e=0;e<o.length;e+=1)e>=f&&e<=g&&(void 0===l||t?y.push(e):(e>l&&y.push(e),e<n&&b.push(e)));y.forEach(e=>{x.$wrapperEl.append(S(o[e],e))}),b.sort((e,t)=>t-e).forEach(e=>{x.$wrapperEl.prepend(S(o[e],e))}),x.$wrapperEl.children(".swiper-slide").css(u,v+"px"),w()}else x.slidesGrid!==d&&v!==c&&x.slides.css(u,v+"px"),x.updateProgress(),E("virtualUpdate")}a({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}}),x.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]},s("beforeInit",()=>{x.params.virtual.enabled&&(x.virtual.slides=x.params.virtual.slides,x.classNames.push(x.params.containerModifierClass+"virtual"),x.params.watchSlidesProgress=!0,x.originalParams.watchSlidesProgress=!0,x.params.initialSlide||n())}),s("setTranslate",()=>{x.params.virtual.enabled&&(x.params.cssMode&&!x._immediateVirtual?(clearTimeout(t),t=setTimeout(()=>{n()},100)):n())}),s("init update resize",()=>{x.params.virtual.enabled&&x.params.cssMode&&M(x.wrapperEl,"--swiper-virtual-size",x.virtualSize+"px")}),Object.assign(x.virtual,{appendSlide:function(t){if("object"==typeof t&&"length"in t)for(let e=0;e<t.length;e+=1)t[e]&&x.virtual.slides.push(t[e]);else x.virtual.slides.push(t);n(!0)},prependSlide:function(s){const i=x.activeIndex;let e=i+1,r=1;if(Array.isArray(s)){for(let e=0;e<s.length;e+=1)s[e]&&x.virtual.slides.unshift(s[e]);e=i+s.length,r=s.length}else x.virtual.slides.unshift(s);if(x.params.virtual.cache){const s=x.virtual.cache,i={};Object.keys(s).forEach(e=>{const t=s[e],a=t.attr("data-swiper-slide-index");a&&t.attr("data-swiper-slide-index",parseInt(a,10)+r),i[parseInt(e,10)+r]=t}),x.virtual.cache=i}n(!0),x.slideTo(e,0)},removeSlide:function(a){if(null!=a){let t=x.activeIndex;if(Array.isArray(a))for(let e=a.length-1;0<=e;--e)x.virtual.slides.splice(a[e],1),x.params.virtual.cache&&delete x.virtual.cache[a[e]],a[e]<t&&--t,t=Math.max(t,0);else x.virtual.slides.splice(a,1),x.params.virtual.cache&&delete x.virtual.cache[a],a<t&&--t,t=Math.max(t,0);n(!0),x.slideTo(t,0)}},removeAllSlides:function(){x.virtual.slides=[],x.params.virtual.cache&&(x.virtual.cache={}),n(!0),x.slideTo(0,0)},update:n})},function(e){let{swiper:p,extendParams:t,on:a,emit:u}=e;const h=C(),m=z();function s(t){if(p.enabled){const a=p["rtlTranslate"];let e=t;const s=(e=e.originalEvent?e.originalEvent:e).keyCode||e.charCode,i=p.params.keyboard.pageUpDown,r=i&&33===s,n=i&&34===s,l=37===s,o=39===s,d=38===s,c=40===s;if(!p.allowSlideNext&&(p.isHorizontal()&&o||p.isVertical()&&c||n))return!1;if(!p.allowSlidePrev&&(p.isHorizontal()&&l||p.isVertical()&&d||r))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||h.activeElement&&h.activeElement.nodeName&&("input"===h.activeElement.nodeName.toLowerCase()||"textarea"===h.activeElement.nodeName.toLowerCase()))){if(p.params.keyboard.onlyInViewport&&(r||n||l||o||d||c)){let t=!1;if(0<p.$el.parents("."+p.params.slideClass).length&&0===p.$el.parents("."+p.params.slideActiveClass).length)return;const e=p.$el,s=e[0].clientWidth,i=e[0].clientHeight,u=m.innerWidth,h=m.innerHeight,r=p.$el.offset(),n=(a&&(r.left-=p.$el[0].scrollLeft),[[r.left,r.top],[r.left+s,r.top],[r.left,r.top+i],[r.left+s,r.top+i]]);for(let e=0;e<n.length;e+=1){const a=n[e];0<=a[0]&&a[0]<=u&&0<=a[1]&&a[1]<=h&&(0===a[0]&&0===a[1]||(t=!0))}if(!t)return}p.isHorizontal()?((r||n||l||o)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),((n||o)&&!a||(r||l)&&a)&&p.slideNext(),((r||l)&&!a||(n||o)&&a)&&p.slidePrev()):((r||n||d||c)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),(n||c)&&p.slideNext(),(r||d)&&p.slidePrev()),u("keyPress",s)}}}function i(){p.keyboard.enabled||(I(h).on("keydown",s),p.keyboard.enabled=!0)}function r(){p.keyboard.enabled&&(I(h).off("keydown",s),p.keyboard.enabled=!1)}p.keyboard={enabled:!1},t({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),a("init",()=>{p.params.keyboard.enabled&&i()}),a("destroy",()=>{p.keyboard.enabled&&r()}),Object.assign(p.keyboard,{enable:i,disable:r})},function(e){let{swiper:d,extendParams:t,on:a,emit:c}=e;const s=z();let p;t({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}}),d.mousewheel={enabled:!1};let u,i=v();const h=[];function r(){d.enabled&&(d.mouseEntered=!0)}function n(){d.enabled&&(d.mouseEntered=!1)}function m(e){d.params.mousewheel.thresholdDelta&&e.delta<d.params.mousewheel.thresholdDelta||d.params.mousewheel.thresholdTime&&v()-i<d.params.mousewheel.thresholdTime||6<=e.delta&&v()-i<60||(e.direction<0?d.isEnd&&!d.params.loop||d.animating||(d.slideNext(),c("scroll",e.raw)):d.isBeginning&&!d.params.loop||d.animating||(d.slidePrev(),c("scroll",e.raw)),i=(new s.Date).getTime())}function l(s){let i=s,r=!0;if(d.enabled){var n=d.params.mousewheel;d.params.cssMode&&i.preventDefault();let e=d.$el;if("container"!==d.params.mousewheel.eventsTarget&&(e=I(d.params.mousewheel.eventsTarget)),!d.mouseEntered&&!e[0].contains(i.target)&&!n.releaseOnEdges)return!0;i.originalEvent&&(i=i.originalEvent);let t=0;var l=d.rtlTranslate?-1:1,o=function(e){let t=0,a=0,s=0,i=0;return"detail"in e&&(a=e.detail),"wheelDelta"in e&&(a=-e.wheelDelta/120),"wheelDeltaY"in e&&(a=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),s=10*t,i=10*a,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=i,i=0),(s||i)&&e.deltaMode&&(1===e.deltaMode?(s*=40,i*=40):(s*=800,i*=800)),s&&!t&&(t=s<1?-1:1),i&&!a&&(a=i<1?-1:1),{spinX:t,spinY:a,pixelX:s,pixelY:i}}(i);if(n.forceToAxis)if(d.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;t=-o.pixelX*l}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;t=-o.pixelY}else t=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*l:-o.pixelY;if(0===t)return!0;n.invert&&(t=-t);let a=d.getTranslate()+t*n.sensitivity;if((a=a>=d.minTranslate()?d.minTranslate():a)<=d.maxTranslate()&&(a=d.maxTranslate()),(r=!!d.params.loop||!(a===d.minTranslate()||a===d.maxTranslate()))&&d.params.nested&&i.stopPropagation(),d.params.freeMode&&d.params.freeMode.enabled){const s={time:v(),delta:Math.abs(t),direction:Math.sign(t)},r=u&&s.time<u.time+500&&s.delta<=u.delta&&s.direction===u.direction;if(!r){u=void 0,d.params.loop&&d.loopFix();let e=d.getTranslate()+t*n.sensitivity;const I=d.isBeginning,v=d.isEnd;if((e=e>=d.minTranslate()?d.minTranslate():e)<=d.maxTranslate()&&(e=d.maxTranslate()),d.setTransition(0),d.setTranslate(e),d.updateProgress(),d.updateActiveIndex(),d.updateSlidesClasses(),(!I&&d.isBeginning||!v&&d.isEnd)&&d.updateSlidesClasses(),d.params.freeMode.sticky){clearTimeout(p),p=void 0,15<=h.length&&h.shift();const i=h.length?h[h.length-1]:void 0,r=h[0];if(h.push(s),i&&(s.delta>i.delta||s.direction!==i.direction))h.splice(0);else if(15<=h.length&&s.time-r.time<500&&1<=r.delta-s.delta&&s.delta<=6){const i=0<t?.8:.2;u=s,h.splice(0),p=T(()=>{d.slideToClosest(d.params.speed,!0,void 0,i)},0)}p=p||T(()=>{u=s,h.splice(0),d.slideToClosest(d.params.speed,!0,void 0,.5)},500)}if(r||c("scroll",i),d.params.autoplay&&d.params.autoplayDisableOnInteraction&&d.autoplay.stop(),e===d.minTranslate()||e===d.maxTranslate())return!0}}else{const i={time:v(),delta:Math.abs(t),direction:Math.sign(t),raw:s},r=(2<=h.length&&h.shift(),h.length?h[h.length-1]:void 0);if(h.push(i),(!r||i.direction!==r.direction||i.delta>r.delta||i.time>r.time+150)&&m(i),function(e){var t=d.params.mousewheel;if(e.direction<0){if(d.isEnd&&!d.params.loop&&t.releaseOnEdges)return 1}else if(d.isBeginning&&!d.params.loop&&t.releaseOnEdges)return 1}(i))return!0}return i.preventDefault?i.preventDefault():i.returnValue=!1,!1}}function o(e){let t=d.$el;(t="container"!==d.params.mousewheel.eventsTarget?I(d.params.mousewheel.eventsTarget):t)[e]("mouseenter",r),t[e]("mouseleave",n),t[e]("wheel",l)}function f(){return d.params.cssMode?(d.wrapperEl.removeEventListener("wheel",l),!0):!d.mousewheel.enabled&&(o("on"),d.mousewheel.enabled=!0)}function g(){return d.params.cssMode?(d.wrapperEl.addEventListener(event,l),!0):!!d.mousewheel.enabled&&(o("off"),!(d.mousewheel.enabled=!1))}a("init",()=>{!d.params.mousewheel.enabled&&d.params.cssMode&&g(),d.params.mousewheel.enabled&&f()}),a("destroy",()=>{d.params.cssMode&&f(),d.mousewheel.enabled&&g()}),Object.assign(d.mousewheel,{enable:f,disable:g})},function(e){let{swiper:r,extendParams:t,on:a,emit:n}=e;function s(e){let t;return e&&(t=I(e),r.params.uniqueNavElements&&"string"==typeof e&&1<t.length&&1===r.$el.find(e).length&&(t=r.$el.find(e))),t}function i(e,t){var a=r.params.navigation;e&&0<e.length&&(e[t?"addClass":"removeClass"](a.disabledClass),e[0]&&"BUTTON"===e[0].tagName&&(e[0].disabled=t),r.params.watchOverflow&&r.enabled&&e[r.isLocked?"addClass":"removeClass"](a.lockClass))}function l(){var e,t;r.params.loop||({$nextEl:e,$prevEl:t}=r.navigation,i(t,r.isBeginning&&!r.params.rewind),i(e,r.isEnd&&!r.params.rewind))}function o(e){e.preventDefault(),r.isBeginning&&!r.params.loop&&!r.params.rewind||(r.slidePrev(),n("navigationPrev"))}function d(e){e.preventDefault(),r.isEnd&&!r.params.loop&&!r.params.rewind||(r.slideNext(),n("navigationNext"))}function c(){var e=r.params.navigation;if(r.params.navigation=$(r,r.originalParams.navigation,r.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),e.nextEl||e.prevEl){const t=s(e.nextEl),a=s(e.prevEl);t&&0<t.length&&t.on("click",d),a&&0<a.length&&a.on("click",o),Object.assign(r.navigation,{$nextEl:t,nextEl:t&&t[0],$prevEl:a,prevEl:a&&a[0]}),r.enabled||(t&&t.addClass(e.lockClass),a&&a.addClass(e.lockClass))}}function p(){const{$nextEl:e,$prevEl:t}=r.navigation;e&&e.length&&(e.off("click",d),e.removeClass(r.params.navigation.disabledClass)),t&&t.length&&(t.off("click",o),t.removeClass(r.params.navigation.disabledClass))}t({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),r.navigation={nextEl:null,$nextEl:null,prevEl:null,$prevEl:null},a("init",()=>{!1===r.params.navigation.enabled?u():(c(),l())}),a("toEdge fromEdge lock unlock",()=>{l()}),a("destroy",()=>{p()}),a("enable disable",()=>{const{$nextEl:e,$prevEl:t}=r.navigation;e&&e[r.enabled?"removeClass":"addClass"](r.params.navigation.lockClass),t&&t[r.enabled?"removeClass":"addClass"](r.params.navigation.lockClass)}),a("click",(e,t)=>{const{$nextEl:a,$prevEl:s}=r.navigation,i=t.target;if(r.params.navigation.hideOnClick&&!I(i).is(s)&&!I(i).is(a)&&(!(r.pagination&&r.params.pagination&&r.params.pagination.clickable)||r.pagination.el!==i&&!r.pagination.el.contains(i))){let e;a?e=a.hasClass(r.params.navigation.hiddenClass):s&&(e=s.hasClass(r.params.navigation.hiddenClass)),n(!0===e?"navigationShow":"navigationHide"),a&&a.toggleClass(r.params.navigation.hiddenClass),s&&s.toggleClass(r.params.navigation.hiddenClass)}});const u=()=>{r.$el.addClass(r.params.navigation.navigationDisabledClass),p()};Object.assign(r.navigation,{enable:()=>{r.$el.removeClass(r.params.navigation.navigationDisabledClass),c(),l()},disable:u,update:l,init:c,destroy:p})},function(e){let{swiper:d,extendParams:t,on:a,emit:c}=e;e="swiper-pagination";let p,u=(t({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:e+"-bullet",bulletActiveClass:e+"-bullet-active",modifierClass:e+"-",currentClass:e+"-current",totalClass:e+"-total",hiddenClass:e+"-hidden",progressbarFillClass:e+"-progressbar-fill",progressbarOppositeClass:e+"-progressbar-opposite",clickableClass:e+"-clickable",lockClass:e+"-lock",horizontalClass:e+"-horizontal",verticalClass:e+"-vertical",paginationDisabledClass:e+"-disabled"}}),d.pagination={el:null,$el:null,bullets:[]},0);function r(){return!d.params.pagination.el||!d.pagination.el||!d.pagination.$el||0===d.pagination.$el.length}function h(e,t){var a=d.params.pagination["bulletActiveClass"];e[t]().addClass(a+"-"+t)[t]().addClass(a+`-${t}-`+t)}function s(){const t=d.rtl,n=d.params.pagination;if(!r()){const l=(d.virtual&&d.params.virtual.enabled?d.virtual:d).slides.length,o=d.pagination.$el;let r;var a=d.params.loop?Math.ceil((l-2*d.loopedSlides)/d.params.slidesPerGroup):d.snapGrid.length;if(d.params.loop?((r=Math.ceil((d.activeIndex-d.loopedSlides)/d.params.slidesPerGroup))>l-1-2*d.loopedSlides&&(r-=l-2*d.loopedSlides),r>a-1&&(r-=a),r<0&&"bullets"!==d.params.paginationType&&(r=a+r)):r=void 0!==d.snapIndex?d.snapIndex:d.activeIndex||0,"bullets"===n.type&&d.pagination.bullets&&0<d.pagination.bullets.length){const l=d.pagination.bullets;let s,i,e;if(n.dynamicBullets&&(p=l.eq(0)[d.isHorizontal()?"outerWidth":"outerHeight"](!0),o.css(d.isHorizontal()?"width":"height",p*(n.dynamicMainBullets+4)+"px"),1<n.dynamicMainBullets&&void 0!==d.previousIndex&&((u+=r-(d.previousIndex-d.loopedSlides||0))>n.dynamicMainBullets-1?u=n.dynamicMainBullets-1:u<0&&(u=0)),s=Math.max(r-u,0),i=s+(Math.min(l.length,n.dynamicMainBullets)-1),e=(i+s)/2),l.removeClass(["","-next","-next-next","-prev","-prev-prev","-main"].map(e=>""+n.bulletActiveClass+e).join(" ")),1<o.length)l.each(e=>{const t=I(e),a=t.index();a===r&&t.addClass(n.bulletActiveClass),n.dynamicBullets&&(a>=s&&a<=i&&t.addClass(n.bulletActiveClass+"-main"),a===s&&h(t,"prev"),a===i&&h(t,"next"))});else{const t=l.eq(r),o=t.index();if(t.addClass(n.bulletActiveClass),n.dynamicBullets){const t=l.eq(s),p=l.eq(i);for(let e=s;e<=i;e+=1)l.eq(e).addClass(n.bulletActiveClass+"-main");if(d.params.loop)if(o>=l.length){for(let e=n.dynamicMainBullets;0<=e;--e)l.eq(l.length-e).addClass(n.bulletActiveClass+"-main");l.eq(l.length-n.dynamicMainBullets-1).addClass(n.bulletActiveClass+"-prev")}else h(t,"prev"),h(p,"next");else h(t,"prev"),h(p,"next")}}if(n.dynamicBullets){const c=Math.min(l.length,n.dynamicMainBullets+4),o=(p*c-p)/2-e*p,u=t?"right":"left";l.css(d.isHorizontal()?u:"top",o+"px")}}if("fraction"===n.type&&(o.find(P(n.currentClass)).text(n.formatFractionCurrent(r+1)),o.find(P(n.totalClass)).text(n.formatFractionTotal(a))),"progressbar"===n.type){var s=n.progressbarOpposite?d.isHorizontal()?"vertical":"horizontal":d.isHorizontal()?"horizontal":"vertical";const l=(r+1)/a;let e=1,t=1;"horizontal"==s?e=l:t=l,o.find(P(n.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${e}) scaleY(${t})`).transition(d.params.speed)}"custom"===n.type&&n.renderCustom?(o.html(n.renderCustom(d,r+1,a)),c("paginationRender",o[0])):c("paginationUpdate",o[0]),d.params.watchOverflow&&d.enabled&&o[d.isLocked?"addClass":"removeClass"](n.lockClass)}}function i(){const s=d.params.pagination;if(!r()){const e=(d.virtual&&d.params.virtual.enabled?d.virtual:d).slides.length,i=d.pagination.$el;let a="";if("bullets"===s.type){let t=d.params.loop?Math.ceil((e-2*d.loopedSlides)/d.params.slidesPerGroup):d.snapGrid.length;d.params.freeMode&&d.params.freeMode.enabled&&!d.params.loop&&t>e&&(t=e);for(let e=0;e<t;e+=1)s.renderBullet?a+=s.renderBullet.call(d,e,s.bulletClass):a+=`<${s.bulletElement} class="${s.bulletClass}"></${s.bulletElement}>`;i.html(a),d.pagination.bullets=i.find(P(s.bulletClass))}"fraction"===s.type&&(a=s.renderFraction?s.renderFraction.call(d,s.currentClass,s.totalClass):`<span class="${s.currentClass}"></span> / <span class="${s.totalClass}"></span>`,i.html(a)),"progressbar"===s.type&&(a=s.renderProgressbar?s.renderProgressbar.call(d,s.progressbarFillClass):`<span class="${s.progressbarFillClass}"></span>`,i.html(a)),"custom"!==s.type&&c("paginationRender",d.pagination.$el[0])}}function n(){d.params.pagination=$(d,d.originalParams.pagination,d.params.pagination,{el:"swiper-pagination"});const t=d.params.pagination;if(t.el){let e=I(t.el);0!==e.length&&(d.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&(1<(e=d.$el.find(t.el)).length&&(e=e.filter(e=>I(e).parents(".swiper")[0]===d.el))),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),e.addClass(d.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),u=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click",P(t.bulletClass),function(e){e.preventDefault();let t=I(this).index()*d.params.slidesPerGroup;d.params.loop&&(t+=d.loopedSlides),d.slideTo(t)}),Object.assign(d.pagination,{$el:e,el:e[0]}),d.enabled||e.addClass(t.lockClass))}}function l(){var e=d.params.pagination;if(!r()){const t=d.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),t.removeClass(d.isHorizontal()?e.horizontalClass:e.verticalClass),d.pagination.bullets&&d.pagination.bullets.removeClass&&d.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click",P(e.bulletClass))}}a("init",()=>{!1===d.params.pagination.enabled?o():(n(),i(),s())}),a("activeIndexChange",()=>{!d.params.loop&&void 0!==d.snapIndex||s()}),a("snapIndexChange",()=>{d.params.loop||s()}),a("slidesLengthChange",()=>{d.params.loop&&(i(),s())}),a("snapGridLengthChange",()=>{d.params.loop||(i(),s())}),a("destroy",()=>{l()}),a("enable disable",()=>{const e=d.pagination["$el"];e&&e[d.enabled?"removeClass":"addClass"](d.params.pagination.lockClass)}),a("lock unlock",()=>{s()}),a("click",(e,t)=>{const a=t.target,s=d.pagination["$el"];if(d.params.pagination.el&&d.params.pagination.hideOnClick&&s&&0<s.length&&!I(a).hasClass(d.params.pagination.bulletClass)&&(!d.navigation||!(d.navigation.nextEl&&a===d.navigation.nextEl||d.navigation.prevEl&&a===d.navigation.prevEl))){const e=s.hasClass(d.params.pagination.hiddenClass);c(!0===e?"paginationShow":"paginationHide"),s.toggleClass(d.params.pagination.hiddenClass)}});const o=()=>{d.$el.addClass(d.params.pagination.paginationDisabledClass),d.pagination.$el&&d.pagination.$el.addClass(d.params.pagination.paginationDisabledClass),l()};Object.assign(d.pagination,{enable:()=>{d.$el.removeClass(d.params.pagination.paginationDisabledClass),d.pagination.$el&&d.pagination.$el.removeClass(d.params.pagination.paginationDisabledClass),n(),i(),s()},disable:o,render:i,update:s,init:n,destroy:l})},function(e){let{swiper:d,extendParams:t,on:a,emit:n}=e;const c=C();let l,o,p,s,u=!1,h=null,m=null;function i(){if(d.params.scrollbar.el&&d.scrollbar.el){const{scrollbar:a,rtlTranslate:s,progress:i}=d,{$dragEl:r,$el:n}=a,l=d.params.scrollbar;let e=o,t=(p-o)*i;s?0<(t=-t)?(e=o-t,t=0):-t+o>p&&(e=p+t):t<0?(e=o+t,t=0):t+o>p&&(e=p-t),d.isHorizontal()?(r.transform(`translate3d(${t}px, 0, 0)`),r[0].style.width=e+"px"):(r.transform(`translate3d(0px, ${t}px, 0)`),r[0].style.height=e+"px"),l.hide&&(clearTimeout(h),n[0].style.opacity=1,h=setTimeout(()=>{n[0].style.opacity=0,n.transition(400)},1e3))}}function r(){if(d.params.scrollbar.el&&d.scrollbar.el){const e=d["scrollbar"],{$dragEl:t,$el:a}=e;t[0].style.width="",t[0].style.height="",p=d.isHorizontal()?a[0].offsetWidth:a[0].offsetHeight,s=d.size/(d.virtualSize+d.params.slidesOffsetBefore-(d.params.centeredSlides?d.snapGrid[0]:0)),o="auto"===d.params.scrollbar.dragSize?p*s:parseInt(d.params.scrollbar.dragSize,10),d.isHorizontal()?t[0].style.width=o+"px":t[0].style.height=o+"px",a[0].style.display=1<=s?"none":"",d.params.scrollbar.hide&&(a[0].style.opacity=0),d.params.watchOverflow&&d.enabled&&e.$el[d.isLocked?"addClass":"removeClass"](d.params.scrollbar.lockClass)}}function f(e){return d.isHorizontal()?("touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0]:e).clientX:("touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0]:e).clientY}function g(e){const{scrollbar:t,rtlTranslate:a}=d,s=t["$el"];let i;i=(f(e)-s.offset()[d.isHorizontal()?"left":"top"]-(null!==l?l:o/2))/(p-o),i=Math.max(Math.min(i,1),0),a&&(i=1-i);e=d.minTranslate()+(d.maxTranslate()-d.minTranslate())*i;d.updateProgress(e),d.setTranslate(e),d.updateActiveIndex(),d.updateSlidesClasses()}function v(e){const t=d.params.scrollbar,{scrollbar:a,$wrapperEl:s}=d,{$el:i,$dragEl:r}=a;u=!0,l=e.target===r[0]||e.target===r?f(e)-e.target.getBoundingClientRect()[d.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),g(e),clearTimeout(m),i.transition(0),t.hide&&i.css("opacity",1),d.params.cssMode&&d.$wrapperEl.css("scroll-snap-type","none"),n("scrollbarDragStart",e)}function w(e){const{scrollbar:t,$wrapperEl:a}=d,{$el:s,$dragEl:i}=t;u&&(e.preventDefault?e.preventDefault():e.returnValue=!1,g(e),a.transition(0),s.transition(0),i.transition(0),n("scrollbarDragMove",e))}function b(e){const t=d.params.scrollbar,{scrollbar:a,$wrapperEl:s}=d,i=a["$el"];u&&(u=!1,d.params.cssMode&&(d.$wrapperEl.css("scroll-snap-type",""),s.transition("")),t.hide&&(clearTimeout(m),m=T(()=>{i.css("opacity",0),i.transition(400)},1e3)),n("scrollbarDragEnd",e),t.snapOnRelease&&d.slideToClosest())}function y(e){var{scrollbar:t,touchEventsTouch:a,touchEventsDesktop:s,params:i,support:r}=d,t=t.$el;if(t){const n=t[0],l=!(!r.passiveListener||!i.passiveListeners)&&{passive:!1,capture:!1},o=!(!r.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};n&&(t="on"===e?"addEventListener":"removeEventListener",r.touch?(n[t](a.start,v,l),n[t](a.move,w,l),n[t](a.end,b,o)):(n[t](s.start,v,l),c[t](s.move,w,l),c[t](s.end,b,o)))}}function x(){const{scrollbar:a,$el:s}=d;d.params.scrollbar=$(d,d.originalParams.scrollbar,d.params.scrollbar,{el:"swiper-scrollbar"});var i=d.params.scrollbar;if(i.el){let e=I(i.el),t=((e=d.params.uniqueNavElements&&"string"==typeof i.el&&1<e.length&&1===s.find(i.el).length?s.find(i.el):e).addClass(d.isHorizontal()?i.horizontalClass:i.verticalClass),e.find("."+d.params.scrollbar.dragClass));0===t.length&&(t=I(`<div class="${d.params.scrollbar.dragClass}"></div>`),e.append(t)),Object.assign(a,{$el:e,el:e[0],$dragEl:t,dragEl:t[0]}),i.draggable&&d.params.scrollbar.el&&d.scrollbar.el&&y("on"),e&&e[d.enabled?"removeClass":"addClass"](d.params.scrollbar.lockClass)}}function E(){const e=d.params.scrollbar,t=d.scrollbar.$el;t&&t.removeClass(d.isHorizontal()?e.horizontalClass:e.verticalClass),d.params.scrollbar.el&&d.scrollbar.el&&y("off")}t({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),d.scrollbar={el:null,dragEl:null,$el:null,$dragEl:null},a("init",()=>{!1===d.params.scrollbar.enabled?S():(x(),r(),i())}),a("update resize observerUpdate lock unlock",()=>{r()}),a("setTranslate",()=>{i()}),a("setTransition",(e,t)=>{t=t,d.params.scrollbar.el&&d.scrollbar.el&&d.scrollbar.$dragEl.transition(t)}),a("enable disable",()=>{const e=d.scrollbar["$el"];e&&e[d.enabled?"removeClass":"addClass"](d.params.scrollbar.lockClass)}),a("destroy",()=>{E()});const S=()=>{d.$el.addClass(d.params.scrollbar.scrollbarDisabledClass),d.scrollbar.$el&&d.scrollbar.$el.addClass(d.params.scrollbar.scrollbarDisabledClass),E()};Object.assign(d.scrollbar,{enable:()=>{d.$el.removeClass(d.params.scrollbar.scrollbarDisabledClass),d.scrollbar.$el&&d.scrollbar.$el.removeClass(d.params.scrollbar.scrollbarDisabledClass),x(),r(),i()},disable:S,updateSize:r,setTranslate:i,init:x,destroy:E})},function(e){let{swiper:c,extendParams:t,on:a}=e;t({parallax:{enabled:!1}});const r=(e,t)=>{const a=c["rtl"],s=I(e),i=a?-1:1,r=s.attr("data-swiper-parallax")||"0";let n=s.attr("data-swiper-parallax-x"),l=s.attr("data-swiper-parallax-y");var o=s.attr("data-swiper-parallax-scale"),d=s.attr("data-swiper-parallax-opacity");if(n||l?(n=n||"0",l=l||"0"):c.isHorizontal()?(n=r,l="0"):(l=r,n="0"),n=0<=n.indexOf("%")?parseInt(n,10)*t*i+"%":n*t*i+"px",l=0<=l.indexOf("%")?parseInt(l,10)*t+"%":l*t+"px",null!=d){const e=d-(d-1)*(1-Math.abs(t));s[0].style.opacity=e}if(null==o)s.transform(`translate3d(${n}, ${l}, 0px)`);else{const e=o-(o-1)*(1-Math.abs(t));s.transform(`translate3d(${n}, ${l}, 0px) scale(${e})`)}},s=()=>{const{$el:e,slides:t,progress:s,snapGrid:i}=c;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(e=>{r(e,s)}),t.each((e,t)=>{let a=e.progress;1<c.params.slidesPerGroup&&"auto"!==c.params.slidesPerView&&(a+=Math.ceil(t/2)-s*(i.length-1)),a=Math.min(Math.max(a,-1),1),I(e).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(e=>{r(e,a)})})};a("beforeInit",()=>{c.params.parallax.enabled&&(c.params.watchSlidesProgress=!0,c.originalParams.watchSlidesProgress=!0)}),a("init",()=>{c.params.parallax.enabled&&s()}),a("setTranslate",()=>{c.params.parallax.enabled&&s()}),a("setTransition",(e,t)=>{if(c.params.parallax.enabled){var s=t;void 0===s&&(s=c.params.speed);const a=c["$el"];a.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(e=>{const t=I(e);let a=parseInt(t.attr("data-swiper-parallax-duration"),10)||s;0===s&&(a=0),t.transition(a)})}})},function(e){let{swiper:x,extendParams:t,on:a,emit:s}=e;const E=z();t({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),x.zoom={enabled:!1};let i,r,n,S=1,l=!1;const C={$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},T={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},o={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let d=1;function c(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,e=e.targetTouches[1].pageY;return Math.sqrt((s-t)**2+(e-a)**2)}function p(e){var t=x.support,a=x.params.zoom;if(r=!1,n=!1,!t.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;r=!0,C.scaleStart=c(e)}C.$slideEl&&C.$slideEl.length||(C.$slideEl=I(e.target).closest("."+x.params.slideClass),0===C.$slideEl.length&&(C.$slideEl=x.slides.eq(x.activeIndex)),C.$imageEl=C.$slideEl.find("."+a.containerClass).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),C.$imageWrapEl=C.$imageEl.parent("."+a.containerClass),C.maxRatio=C.$imageWrapEl.attr("data-swiper-zoom")||a.maxRatio,0!==C.$imageWrapEl.length)?(C.$imageEl&&C.$imageEl.transition(0),l=!0):C.$imageEl=void 0}function u(e){const t=x.support,a=x.params.zoom,s=x.zoom;if(!t.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;n=!0,C.scaleMove=c(e)}C.$imageEl&&0!==C.$imageEl.length?(t.gestures?s.scale=e.scale*S:s.scale=C.scaleMove/C.scaleStart*S,s.scale>C.maxRatio&&(s.scale=C.maxRatio-1+(s.scale-C.maxRatio+1)**.5),s.scale<a.minRatio&&(s.scale=a.minRatio+1-(a.minRatio-s.scale+1)**.5),C.$imageEl.transform(`translate3d(0,0,0) scale(${s.scale})`)):"gesturechange"===e.type&&p(e)}function h(e){const t=x.device,a=x.support,s=x.params.zoom,i=x.zoom;if(!a.gestures){if(!r||!n)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!t.android)return;r=!1,n=!1}C.$imageEl&&0!==C.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,C.maxRatio),s.minRatio),C.$imageEl.transition(x.params.speed).transform(`translate3d(0,0,0) scale(${i.scale})`),S=i.scale,l=!1,1===i.scale&&(C.$slideEl=void 0))}function m(e){var t=x.zoom;if(C.$imageEl&&0!==C.$imageEl.length&&(x.allowClick=!1,T.isTouched&&C.$slideEl)){T.isMoved||(T.width=C.$imageEl[0].offsetWidth,T.height=C.$imageEl[0].offsetHeight,T.startX=O(C.$imageWrapEl[0],"x")||0,T.startY=O(C.$imageWrapEl[0],"y")||0,C.slideWidth=C.$slideEl[0].offsetWidth,C.slideHeight=C.$slideEl[0].offsetHeight,C.$imageWrapEl.transition(0));var a=T.width*t.scale,t=T.height*t.scale;if(!(a<C.slideWidth&&t<C.slideHeight)){if(T.minX=Math.min(C.slideWidth/2-a/2,0),T.maxX=-T.minX,T.minY=Math.min(C.slideHeight/2-t/2,0),T.maxY=-T.minY,T.touchesCurrent.x=("touchmove"===e.type?e.targetTouches[0]:e).pageX,T.touchesCurrent.y=("touchmove"===e.type?e.targetTouches[0]:e).pageY,!T.isMoved&&!l){if(x.isHorizontal()&&(Math.floor(T.minX)===Math.floor(T.startX)&&T.touchesCurrent.x<T.touchesStart.x||Math.floor(T.maxX)===Math.floor(T.startX)&&T.touchesCurrent.x>T.touchesStart.x))return void(T.isTouched=!1);if(!x.isHorizontal()&&(Math.floor(T.minY)===Math.floor(T.startY)&&T.touchesCurrent.y<T.touchesStart.y||Math.floor(T.maxY)===Math.floor(T.startY)&&T.touchesCurrent.y>T.touchesStart.y))return void(T.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),T.isMoved=!0,T.currentX=T.touchesCurrent.x-T.touchesStart.x+T.startX,T.currentY=T.touchesCurrent.y-T.touchesStart.y+T.startY,T.currentX<T.minX&&(T.currentX=T.minX+1-(T.minX-T.currentX+1)**.8),T.currentX>T.maxX&&(T.currentX=T.maxX-1+(T.currentX-T.maxX+1)**.8),T.currentY<T.minY&&(T.currentY=T.minY+1-(T.minY-T.currentY+1)**.8),T.currentY>T.maxY&&(T.currentY=T.maxY-1+(T.currentY-T.maxY+1)**.8),o.prevPositionX||(o.prevPositionX=T.touchesCurrent.x),o.prevPositionY||(o.prevPositionY=T.touchesCurrent.y),o.prevTime||(o.prevTime=Date.now()),o.x=(T.touchesCurrent.x-o.prevPositionX)/(Date.now()-o.prevTime)/2,o.y=(T.touchesCurrent.y-o.prevPositionY)/(Date.now()-o.prevTime)/2,Math.abs(T.touchesCurrent.x-o.prevPositionX)<2&&(o.x=0),Math.abs(T.touchesCurrent.y-o.prevPositionY)<2&&(o.y=0),o.prevPositionX=T.touchesCurrent.x,o.prevPositionY=T.touchesCurrent.y,o.prevTime=Date.now(),C.$imageWrapEl.transform(`translate3d(${T.currentX}px, ${T.currentY}px,0)`)}}}function f(){const e=x.zoom;C.$slideEl&&x.previousIndex!==x.activeIndex&&(C.$imageEl&&C.$imageEl.transform("translate3d(0,0,0) scale(1)"),C.$imageWrapEl&&C.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,S=1,C.$slideEl=void 0,C.$imageEl=void 0,C.$imageWrapEl=void 0)}function g(w){const b=x.zoom,y=x.params.zoom;if(C.$slideEl||(w&&w.target&&(C.$slideEl=I(w.target).closest("."+x.params.slideClass)),C.$slideEl||(x.params.virtual&&x.params.virtual.enabled&&x.virtual?C.$slideEl=x.$wrapperEl.children("."+x.params.slideActiveClass):C.$slideEl=x.slides.eq(x.activeIndex)),C.$imageEl=C.$slideEl.find("."+y.containerClass).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),C.$imageWrapEl=C.$imageEl.parent("."+y.containerClass)),C.$imageEl&&0!==C.$imageEl.length&&C.$imageWrapEl&&0!==C.$imageWrapEl.length){let e,t,a,s,i,r,n,l,o,d,c,p,u,h,m,f,g,v;x.params.cssMode&&(x.wrapperEl.style.overflow="hidden",x.wrapperEl.style.touchAction="none"),C.$slideEl.addClass(""+y.zoomedSlideClass),t=void 0===T.touchesStart.x&&w?(e=("touchend"===w.type?w.changedTouches[0]:w).pageX,("touchend"===w.type?w.changedTouches[0]:w).pageY):(e=T.touchesStart.x,T.touchesStart.y),b.scale=C.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,S=C.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,w?(g=C.$slideEl[0].offsetWidth,v=C.$slideEl[0].offsetHeight,a=C.$slideEl.offset().left+E.scrollX,s=C.$slideEl.offset().top+E.scrollY,i=a+g/2-e,r=s+v/2-t,o=C.$imageEl[0].offsetWidth,d=C.$imageEl[0].offsetHeight,c=o*b.scale,p=d*b.scale,m=-(u=Math.min(g/2-c/2,0)),f=-(h=Math.min(v/2-p/2,0)),n=i*b.scale,l=r*b.scale,(n=n<u?u:n)>m&&(n=m),(l=l<h?h:l)>f&&(l=f)):(n=0,l=0),C.$imageWrapEl.transition(300).transform(`translate3d(${n}px, ${l}px,0)`),C.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${b.scale})`)}}function v(){const e=x.zoom,t=x.params.zoom;C.$slideEl||(x.params.virtual&&x.params.virtual.enabled&&x.virtual?C.$slideEl=x.$wrapperEl.children("."+x.params.slideActiveClass):C.$slideEl=x.slides.eq(x.activeIndex),C.$imageEl=C.$slideEl.find("."+t.containerClass).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),C.$imageWrapEl=C.$imageEl.parent("."+t.containerClass)),C.$imageEl&&0!==C.$imageEl.length&&C.$imageWrapEl&&0!==C.$imageWrapEl.length&&(x.params.cssMode&&(x.wrapperEl.style.overflow="",x.wrapperEl.style.touchAction=""),e.scale=1,S=1,C.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),C.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),C.$slideEl.removeClass(""+t.zoomedSlideClass),C.$slideEl=void 0)}function w(e){var t=x.zoom;t.scale&&1!==t.scale?v():g(e)}function b(){var e=x.support;return{passiveListener:!("touchstart"!==x.touchEvents.start||!e.passiveListener||!x.params.passiveListeners)&&{passive:!0,capture:!1},activeListenerWithCapture:!e.passiveListener||{passive:!1,capture:!0}}}function y(){return"."+x.params.slideClass}function M(e){var t=b()["passiveListener"],a=y();x.$wrapperEl[e]("gesturestart",a,p,t),x.$wrapperEl[e]("gesturechange",a,u,t),x.$wrapperEl[e]("gestureend",a,h,t)}function $(){i||(i=!0,M("on"))}function P(){i&&(i=!1,M("off"))}function k(){const e=x.zoom;var t,a,s,i;e.enabled||(e.enabled=!0,t=x.support,{passiveListener:a,activeListenerWithCapture:s}=b(),i=y(),t.gestures?(x.$wrapperEl.on(x.touchEvents.start,$,a),x.$wrapperEl.on(x.touchEvents.end,P,a)):"touchstart"===x.touchEvents.start&&(x.$wrapperEl.on(x.touchEvents.start,i,p,a),x.$wrapperEl.on(x.touchEvents.move,i,u,s),x.$wrapperEl.on(x.touchEvents.end,i,h,a),x.touchEvents.cancel&&x.$wrapperEl.on(x.touchEvents.cancel,i,h,a)),x.$wrapperEl.on(x.touchEvents.move,"."+x.params.zoom.containerClass,m,s))}function L(){const e=x.zoom;var t,a,s,i;e.enabled&&(t=x.support,{passiveListener:a,activeListenerWithCapture:s}=(e.enabled=!1,b()),i=y(),t.gestures?(x.$wrapperEl.off(x.touchEvents.start,$,a),x.$wrapperEl.off(x.touchEvents.end,P,a)):"touchstart"===x.touchEvents.start&&(x.$wrapperEl.off(x.touchEvents.start,i,p,a),x.$wrapperEl.off(x.touchEvents.move,i,u,s),x.$wrapperEl.off(x.touchEvents.end,i,h,a),x.touchEvents.cancel&&x.$wrapperEl.off(x.touchEvents.cancel,i,h,a)),x.$wrapperEl.off(x.touchEvents.move,"."+x.params.zoom.containerClass,m,s))}Object.defineProperty(x.zoom,"scale",{get:()=>d,set(e){var t,a;d!==e&&(t=C.$imageEl?C.$imageEl[0]:void 0,a=C.$slideEl?C.$slideEl[0]:void 0,s("zoomChange",e,t,a)),d=e}}),a("init",()=>{x.params.zoom.enabled&&k()}),a("destroy",()=>{L()}),a("touchStart",(e,t)=>{var a;x.zoom.enabled&&(t=t,a=x.device,C.$imageEl&&0!==C.$imageEl.length&&!T.isTouched&&(a.android&&t.cancelable&&t.preventDefault(),T.isTouched=!0,T.touchesStart.x=("touchstart"===t.type?t.targetTouches[0]:t).pageX,T.touchesStart.y=("touchstart"===t.type?t.targetTouches[0]:t).pageY))}),a("touchEnd",(e,t)=>{if(x.zoom.enabled){var a=x.zoom;if(C.$imageEl&&0!==C.$imageEl.length){if(!T.isTouched||!T.isMoved)return void(T.isTouched=!1,T.isMoved=!1);T.isTouched=!1,T.isMoved=!1;let e=300,t=300;var s=o.x*e,s=T.currentX+s,i=o.y*t,i=T.currentY+i,r=(0!==o.x&&(e=Math.abs((s-T.currentX)/o.x)),0!==o.y&&(t=Math.abs((i-T.currentY)/o.y)),Math.max(e,t)),s=(T.currentX=s,T.currentY=i,T.width*a.scale),i=T.height*a.scale;T.minX=Math.min(C.slideWidth/2-s/2,0),T.maxX=-T.minX,T.minY=Math.min(C.slideHeight/2-i/2,0),T.maxY=-T.minY,T.currentX=Math.max(Math.min(T.currentX,T.maxX),T.minX),T.currentY=Math.max(Math.min(T.currentY,T.maxY),T.minY),C.$imageWrapEl.transition(r).transform(`translate3d(${T.currentX}px, ${T.currentY}px,0)`)}}}),a("doubleTap",(e,t)=>{!x.animating&&x.params.zoom.enabled&&x.zoom.enabled&&x.params.zoom.toggle&&w(t)}),a("transitionEnd",()=>{x.zoom.enabled&&x.params.zoom.enabled&&f()}),a("slideChange",()=>{x.zoom.enabled&&x.params.zoom.enabled&&x.params.cssMode&&f()}),Object.assign(x.zoom,{enable:k,disable:L,in:g,out:v,toggle:w})},function(e){let{swiper:c,extendParams:t,on:a,emit:p}=e,d=(t({lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}}),!(c.lazy={})),u=!1;function h(e,l){void 0===l&&(l=!0);const o=c.params.lazy;if(void 0!==e&&0!==c.slides.length){const d=c.virtual&&c.params.virtual.enabled?c.$wrapperEl.children(`.${c.params.slideClass}[data-swiper-slide-index="${e}"]`):c.slides.eq(e),t=d.find(`.${o.elementClass}:not(.${o.loadedClass}):not(.${o.loadingClass})`);!d.hasClass(o.elementClass)||d.hasClass(o.loadedClass)||d.hasClass(o.loadingClass)||t.push(d[0]),0!==t.length&&t.each(e=>{const t=I(e),a=(t.addClass(o.loadingClass),t.attr("data-background")),s=t.attr("data-src"),i=t.attr("data-srcset"),r=t.attr("data-sizes"),n=t.parent("picture");c.loadImage(t[0],s||a,i,r,!1,()=>{var e;null==c||!c||c&&!c.params||c.destroyed||(a?(t.css("background-image",`url("${a}")`),t.removeAttr("data-background")):(i&&(t.attr("srcset",i),t.removeAttr("data-srcset")),r&&(t.attr("sizes",r),t.removeAttr("data-sizes")),n.length&&n.children("source").each(e=>{const t=I(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))}),s&&(t.attr("src",s),t.removeAttr("data-src"))),t.addClass(o.loadedClass).removeClass(o.loadingClass),d.find("."+o.preloaderClass).remove(),c.params.loop&&l&&(e=d.attr("data-swiper-slide-index"),d.hasClass(c.params.slideDuplicateClass)?h(c.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${c.params.slideDuplicateClass})`).index(),!1):h(c.$wrapperEl.children(`.${c.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`).index(),!1)),p("lazyImageReady",d[0],t[0]),c.params.autoHeight&&c.updateAutoHeight())}),p("lazyImageLoad",d[0],t[0])})}}function m(){const{$wrapperEl:t,params:a,slides:s,activeIndex:i}=c,r=c.virtual&&a.virtual.enabled,e=a.lazy;let n=a.slidesPerView;function l(e){if(r){if(t.children(`.${a.slideClass}[data-swiper-slide-index="${e}"]`).length)return 1}else if(s[e])return 1}function o(e){return r?I(e).attr("data-swiper-slide-index"):I(e).index()}if("auto"===n&&(n=0),u=u||!0,c.params.watchSlidesProgress)t.children("."+a.slideVisibleClass).each(e=>{h(r?I(e).attr("data-swiper-slide-index"):I(e).index())});else if(1<n)for(let e=i;e<i+n;e+=1)l(e)&&h(e);else h(i);if(e.loadPrevNext)if(1<n||e.loadPrevNextAmount&&1<e.loadPrevNextAmount){const t=e.loadPrevNextAmount,c=Math.ceil(n),a=Math.min(i+c+Math.max(t,c),s.length),r=Math.max(i-Math.max(c,t),0);for(let e=i+c;e<a;e+=1)l(e)&&h(e);for(let e=r;e<i;e+=1)l(e)&&h(e)}else{const c=t.children("."+a.slideNextClass),s=(0<c.length&&h(o(c)),t.children("."+a.slidePrevClass));0<s.length&&h(o(s))}}function f(){var e=z();if(c&&!c.destroyed){const s=c.params.lazy.scrollingElement?I(c.params.lazy.scrollingElement):I(e),i=s[0]===e,r=i?e.innerWidth:s[0].offsetWidth,n=i?e.innerHeight:s[0].offsetHeight,l=c.$el.offset(),o=c["rtlTranslate"];let t=!1;o&&(l.left-=c.$el[0].scrollLeft);var a=[[l.left,l.top],[l.left+c.width,l.top],[l.left,l.top+c.height],[l.left+c.width,l.top+c.height]];for(let e=0;e<a.length;e+=1){const c=a[e];0<=c[0]&&c[0]<=r&&0<=c[1]&&c[1]<=n&&(0===c[0]&&0===c[1]||(t=!0))}e=!("touchstart"!==c.touchEvents.start||!c.support.passiveListener||!c.params.passiveListeners)&&{passive:!0,capture:!1};t?(m(),s.off("scroll",f,e)):d||(d=!0,s.on("scroll",f,e))}}a("beforeInit",()=>{c.params.lazy.enabled&&c.params.preloadImages&&(c.params.preloadImages=!1)}),a("init",()=>{c.params.lazy.enabled&&(c.params.lazy.checkInView?f:m)()}),a("scroll",()=>{c.params.freeMode&&c.params.freeMode.enabled&&!c.params.freeMode.sticky&&m()}),a("scrollbarDragMove resize _freeModeNoMomentumRelease",()=>{c.params.lazy.enabled&&(c.params.lazy.checkInView?f:m)()}),a("transitionStart",()=>{c.params.lazy.enabled&&(c.params.lazy.loadOnTransitionStart||!c.params.lazy.loadOnTransitionStart&&!u)&&(c.params.lazy.checkInView?f:m)()}),a("transitionEnd",()=>{c.params.lazy.enabled&&!c.params.lazy.loadOnTransitionStart&&(c.params.lazy.checkInView?f:m)()}),a("slideChange",()=>{var{lazy:e,cssMode:t,watchSlidesProgress:a,touchReleaseOnEdges:s,resistanceRatio:i}=c.params;e.enabled&&(t||a&&(s||0===i))&&m()}),a("destroy",()=>{c.$el&&c.$el.find("."+c.params.lazy.loadingClass).removeClass(c.params.lazy.loadingClass)}),Object.assign(c.lazy,{load:m,loadInSlide:h})},function(e){let{swiper:l,extendParams:t,on:a}=e;function o(e,t){const a=function(){let a,s,i;return(e,t)=>{for(s=-1,a=e.length;1<a-s;)e[i=a+s>>1]<=t?s=i:a=i;return a}}();let s,i;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(i=a(this.x,e),s=i-1,(e-this.x[s])*(this.y[i]-this.y[s])/(this.x[i]-this.x[s])+this.y[s]):0},this}function s(){l.controller.control&&l.controller.spline&&(l.controller.spline=void 0,delete l.controller.spline)}t({controller:{control:void 0,inverse:!1,by:"slide"}}),l.controller={control:void 0},a("beforeInit",()=>{l.controller.control=l.params.controller.control}),a("update",()=>{s()}),a("resize",()=>{s()}),a("observerUpdate",()=>{s()}),a("setTranslate",(e,t,a)=>{l.controller.control&&l.controller.setTranslate(t,a)}),a("setTransition",(e,t,a)=>{l.controller.control&&l.controller.setTransition(t,a)}),Object.assign(l.controller,{setTranslate:function(e,t){var a=l.controller.control;let s,i;var r=l.constructor;function n(e){var t,a=l.rtlTranslate?-l.translate:l.translate;"slide"===l.params.controller.by&&(t=e,l.controller.spline||(l.controller.spline=l.params.loop?new o(l.slidesGrid,t.slidesGrid):new o(l.snapGrid,t.snapGrid)),i=-l.controller.spline.interpolate(-a)),i&&"container"!==l.params.controller.by||(s=(e.maxTranslate()-e.minTranslate())/(l.maxTranslate()-l.minTranslate()),i=(a-l.minTranslate())*s+e.minTranslate()),l.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,l),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(let e=0;e<a.length;e+=1)a[e]!==t&&a[e]instanceof r&&n(a[e]);else a instanceof r&&t!==a&&n(a)},setTransition:function(t,e){const a=l.constructor,s=l.controller.control;let i;function r(e){e.setTransition(t,l),0!==t&&(e.transitionStart(),e.params.autoHeight&&T(()=>{e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(()=>{s&&(e.params.loop&&"slide"===l.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(i=0;i<s.length;i+=1)s[i]!==e&&s[i]instanceof a&&r(s[i]);else s instanceof a&&e!==s&&r(s)}})},function(e){let{swiper:n,extendParams:t,on:a}=e,l=(t({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),n.a11y={clicked:!1},null);function s(e){const t=l;0!==t.length&&(t.html(""),t.html(e))}function i(e){e.attr("tabIndex","0")}function r(e){e.attr("tabIndex","-1")}function o(e,t){e.attr("role",t)}function d(e,t){e.attr("aria-roledescription",t)}function c(e,t){e.attr("aria-label",t)}function p(e){e.attr("aria-disabled",!0)}function u(e){e.attr("aria-disabled",!1)}function h(e){if(13===e.keyCode||32===e.keyCode){const t=n.params.a11y,a=I(e.target);n.navigation&&n.navigation.$nextEl&&a.is(n.navigation.$nextEl)&&(n.isEnd&&!n.params.loop||n.slideNext(),n.isEnd?s(t.lastSlideMessage):s(t.nextSlideMessage)),n.navigation&&n.navigation.$prevEl&&a.is(n.navigation.$prevEl)&&(n.isBeginning&&!n.params.loop||n.slidePrev(),n.isBeginning?s(t.firstSlideMessage):s(t.prevSlideMessage)),n.pagination&&a.is(P(n.params.pagination.bulletClass))&&a[0].click()}}function m(){return n.pagination&&n.pagination.bullets&&n.pagination.bullets.length}function f(){return m()&&n.params.pagination.clickable}const g=(e,t,a)=>{i(e),"BUTTON"!==e[0].tagName&&(o(e,"button"),e.on("keydown",h)),c(e,a),e.attr("aria-controls",t)},v=()=>{n.a11y.clicked=!0},w=()=>{requestAnimationFrame(()=>{requestAnimationFrame(()=>{n.a11y.clicked=!1})})},b=e=>{var t,a;n.a11y.clicked||(e=e.target.closest("."+n.params.slideClass))&&n.slides.includes(e)&&(t=n.slides.indexOf(e)===n.activeIndex,a=n.params.watchSlidesProgress&&n.visibleSlides&&n.visibleSlides.includes(e),t||a||(n.isHorizontal()?n.el.scrollLeft=0:n.el.scrollTop=0,n.slideTo(n.slides.indexOf(e),0)))},y=()=>{const i=n.params.a11y,r=(i.itemRoleDescriptionMessage&&d(I(n.slides),i.itemRoleDescriptionMessage),i.slideRole&&o(I(n.slides),i.slideRole),(n.params.loop?n.slides.filter(e=>!e.classList.contains(n.params.slideDuplicateClass)):n.slides).length);i.slideLabelMessage&&n.slides.each((e,t)=>{const a=I(e),s=n.params.loop?parseInt(a.attr("data-swiper-slide-index"),10):t;c(a,i.slideLabelMessage.replace(/\{\{index\}\}/,s+1).replace(/\{\{slidesLength\}\}/,r))})};a("beforeInit",()=>{l=I(`<span class="${n.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}),a("afterInit",()=>{if(n.params.a11y.enabled){var a=n.params.a11y,s=(n.$el.append(l),n.$el);a.containerRoleDescriptionMessage&&d(s,a.containerRoleDescriptionMessage),a.containerMessage&&c(s,a.containerMessage);const i=n.$wrapperEl,r=a.id||i.attr("id")||"swiper-wrapper-"+"x".repeat(s=void 0===(s=16)?16:s).replace(/x/g,()=>Math.round(16*Math.random()).toString(16));s=n.params.autoplay&&n.params.autoplay.enabled?"off":"polite";let e,t;i.attr("id",r),i.attr("aria-live",s),y(),n.navigation&&n.navigation.$nextEl&&(e=n.navigation.$nextEl),n.navigation&&n.navigation.$prevEl&&(t=n.navigation.$prevEl),e&&e.length&&g(e,r,a.nextSlideMessage),t&&t.length&&g(t,r,a.prevSlideMessage),f()&&n.pagination.$el.on("keydown",P(n.params.pagination.bulletClass),h),n.$el.on("focus",b,!0),n.$el.on("pointerdown",v,!0),n.$el.on("pointerup",w,!0)}}),a("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{n.params.a11y.enabled&&y()}),a("fromEdge toEdge afterInit lock unlock",()=>{var e,t;n.params.a11y.enabled&&!n.params.loop&&!n.params.rewind&&n.navigation&&({$nextEl:e,$prevEl:t}=n.navigation,t&&0<t.length&&(n.isBeginning?(p(t),r(t)):(u(t),i(t))),e&&0<e.length&&(n.isEnd?(p(e),r(e)):(u(e),i(e))))}),a("paginationUpdate",()=>{if(n.params.a11y.enabled){const a=n.params.a11y;m()&&n.pagination.bullets.each(e=>{const t=I(e);n.params.pagination.clickable&&(i(t),n.params.pagination.renderBullet||(o(t,"button"),c(t,a.paginationBulletMessage.replace(/\{\{index\}\}/,t.index()+1)))),t.is("."+n.params.pagination.bulletActiveClass)?t.attr("aria-current","true"):t.removeAttr("aria-current")})}}),a("destroy",()=>{if(n.params.a11y.enabled){let e,t;l&&0<l.length&&l.remove(),n.navigation&&n.navigation.$nextEl&&(e=n.navigation.$nextEl),n.navigation&&n.navigation.$prevEl&&(t=n.navigation.$prevEl),e&&e.off("keydown",h),t&&t.off("keydown",h),f()&&n.pagination.$el.off("keydown",P(n.params.pagination.bulletClass),h),n.$el.off("focus",b,!0),n.$el.off("pointerdown",v,!0),n.$el.off("pointerup",w,!0)}})},function(e){let{swiper:n,extendParams:t,on:a}=e,l=(t({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}}),!1),s={};const o=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),i=e=>{var t=z();let a;e=(a=e?new URL(e):t.location).pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},r=(a,s)=>{const i=z();if(l&&n.params.history.enabled){let e;e=n.params.url?new URL(n.params.url):i.location;const r=n.slides.eq(s);let t=o(r.attr("data-history"));if(0<n.params.history.root.length){let e=n.params.history.root;"/"===e[e.length-1]&&(e=e.slice(0,e.length-1)),t=e+`/${a}/`+t}else e.pathname.includes(a)||(t=a+"/"+t);n.params.history.keepQuery&&(t+=e.search);s=i.history.state;s&&s.value===t||(n.params.history.replaceState?i.history.replaceState({value:t},null,t):i.history.pushState({value:t},null,t))}},d=(a,s,i)=>{if(s)for(let e=0,t=n.slides.length;e<t;e+=1){const r=n.slides.eq(e);if(o(r.attr("data-history"))===s&&!r.hasClass(n.params.slideDuplicateClass)){const s=r.index();n.slideTo(s,a,i)}}else n.slideTo(0,a,i)},c=()=>{s=i(n.params.url),d(n.params.speed,s.value,!1)};a("init",()=>{if(n.params.history.enabled){const e=z();n.params.history&&(e.history&&e.history.pushState?(l=!0,((s=i(n.params.url)).key||s.value)&&(d(0,s.value,n.params.runCallbacksOnInit),n.params.history.replaceState||e.addEventListener("popstate",c))):(n.params.history.enabled=!1,n.params.hashNavigation.enabled=!0))}}),a("destroy",()=>{if(n.params.history.enabled){const e=z();n.params.history.replaceState||e.removeEventListener("popstate",c)}}),a("transitionEnd _freeModeNoMomentumRelease",()=>{l&&r(n.params.history.key,n.activeIndex)}),a("slideChange",()=>{l&&n.params.cssMode&&r(n.params.history.key,n.activeIndex)})},function(e){let{swiper:i,extendParams:t,emit:a,on:s}=e,r=!1;const n=C(),l=z(),o=(t({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}}),()=>{a("hashChange");var e=n.location.hash.replace("#","");e!==i.slides.eq(i.activeIndex).attr("data-hash")&&void 0!==(e=i.$wrapperEl.children(`.${i.params.slideClass}[data-hash="${e}"]`).index())&&i.slideTo(e)}),d=()=>{if(r&&i.params.hashNavigation.enabled)if(i.params.hashNavigation.replaceState&&l.history&&l.history.replaceState)l.history.replaceState(null,null,"#"+i.slides.eq(i.activeIndex).attr("data-hash")||""),a("hashSet");else{const e=i.slides.eq(i.activeIndex),t=e.attr("data-hash")||e.attr("data-history");n.location.hash=t||"",a("hashSet")}};s("init",()=>{if(i.params.hashNavigation.enabled&&!(!i.params.hashNavigation.enabled||i.params.history&&i.params.history.enabled)){r=!0;const a=n.location.hash.replace("#","");if(a)for(let e=0,t=i.slides.length;e<t;e+=1){const s=i.slides.eq(e);if((s.attr("data-hash")||s.attr("data-history"))===a&&!s.hasClass(i.params.slideDuplicateClass)){const a=s.index();i.slideTo(a,0,i.params.runCallbacksOnInit,!0)}}i.params.hashNavigation.watchState&&I(l).on("hashchange",o)}}),s("destroy",()=>{i.params.hashNavigation.enabled&&i.params.hashNavigation.watchState&&I(l).off("hashchange",o)}),s("transitionEnd _freeModeNoMomentumRelease",()=>{r&&d()}),s("slideChange",()=>{r&&i.params.cssMode&&d()})},function(e){let a,{swiper:s,extendParams:t,on:i,emit:r}=e;function n(){if(s.size){const t=s.slides.eq(s.activeIndex);let e=s.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||s.params.autoplay.delay),clearTimeout(a),a=T(()=>{let e;s.params.autoplay.reverseDirection?s.params.loop?(s.loopFix(),e=s.slidePrev(s.params.speed,!0,!0),r("autoplay")):s.isBeginning?s.params.autoplay.stopOnLastSlide?o():(e=s.slideTo(s.slides.length-1,s.params.speed,!0,!0),r("autoplay")):(e=s.slidePrev(s.params.speed,!0,!0),r("autoplay")):s.params.loop?(s.loopFix(),e=s.slideNext(s.params.speed,!0,!0),r("autoplay")):s.isEnd?s.params.autoplay.stopOnLastSlide?o():(e=s.slideTo(0,s.params.speed,!0,!0),r("autoplay")):(e=s.slideNext(s.params.speed,!0,!0),r("autoplay")),(s.params.cssMode&&s.autoplay.running||!1===e)&&n()},e)}else s.autoplay.running=!1,s.autoplay.paused=!1}function l(){return void 0===a&&!s.autoplay.running&&(s.autoplay.running=!0,r("autoplayStart"),n(),!0)}function o(){return!!s.autoplay.running&&void 0!==a&&(a&&(clearTimeout(a),a=void 0),s.autoplay.running=!1,r("autoplayStop"),!0)}function d(e){!s.autoplay.running||s.autoplay.paused||(a&&clearTimeout(a),s.autoplay.paused=!0,0!==e&&s.params.autoplay.waitForTransition?["transitionend","webkitTransitionEnd"].forEach(e=>{s.$wrapperEl[0].addEventListener(e,p)}):(s.autoplay.paused=!1,n()))}function c(){var e=C();"hidden"===e.visibilityState&&s.autoplay.running&&d(),"visible"===e.visibilityState&&s.autoplay.paused&&(n(),s.autoplay.paused=!1)}function p(e){s&&!s.destroyed&&s.$wrapperEl&&e.target===s.$wrapperEl[0]&&(["transitionend","webkitTransitionEnd"].forEach(e=>{s.$wrapperEl[0].removeEventListener(e,p)}),s.autoplay.paused=!1,(s.autoplay.running?n:o)())}function u(){s.params.autoplay.disableOnInteraction?o():(r("autoplayPause"),d()),["transitionend","webkitTransitionEnd"].forEach(e=>{s.$wrapperEl[0].removeEventListener(e,p)})}function h(){s.params.autoplay.disableOnInteraction||(s.autoplay.paused=!1,r("autoplayResume"),n())}s.autoplay={running:!1,paused:!1},t({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}}),i("init",()=>{s.params.autoplay.enabled&&(l(),C().addEventListener("visibilitychange",c),s.params.autoplay.pauseOnMouseEnter&&(s.$el.on("mouseenter",u),s.$el.on("mouseleave",h)))}),i("beforeTransitionStart",(e,t,a)=>{s.autoplay.running&&(a||!s.params.autoplay.disableOnInteraction?s.autoplay.pause(t):o())}),i("sliderFirstMove",()=>{s.autoplay.running&&(s.params.autoplay.disableOnInteraction?o:d)()}),i("touchEnd",()=>{s.params.cssMode&&s.autoplay.paused&&!s.params.autoplay.disableOnInteraction&&n()}),i("destroy",()=>{s.$el.off("mouseenter",u),s.$el.off("mouseleave",h),s.autoplay.running&&o(),C().removeEventListener("visibilitychange",c)}),Object.assign(s.autoplay,{pause:d,run:n,start:l,stop:o})},function(e){let{swiper:o,extendParams:t,on:a}=e,s=(t({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}}),!1),i=!1;function r(){var e=o.thumbs.swiper;if(e&&!e.destroyed){const a=e.clickedIndex,s=e.clickedSlide;if(!(s&&I(s).hasClass(o.params.thumbs.slideThumbActiveClass)||null==a)){let t;if(t=e.params.loop?parseInt(I(e.clickedSlide).attr("data-swiper-slide-index"),10):a,o.params.loop){let e=o.activeIndex;o.slides.eq(e).hasClass(o.params.slideDuplicateClass)&&(o.loopFix(),o._clientLeft=o.$wrapperEl[0].clientLeft,e=o.activeIndex);const a=o.slides.eq(e).prevAll(`[data-swiper-slide-index="${t}"]`).eq(0).index(),s=o.slides.eq(e).nextAll(`[data-swiper-slide-index="${t}"]`).eq(0).index();t=void 0===a||void 0!==s&&s-e<e-a?s:a}o.slideTo(t)}}}function n(){var e=o.params["thumbs"];if(s)return!1;s=!0;const t=o.constructor;return e.swiper instanceof t?(o.thumbs.swiper=e.swiper,Object.assign(o.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(o.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):d(e.swiper)&&(e=Object.assign({},e.swiper),Object.assign(e,{watchSlidesProgress:!0,slideToClickedSlide:!1}),o.thumbs.swiper=new t(e),i=!0),o.thumbs.swiper.$el.addClass(o.params.thumbs.thumbsContainerClass),o.thumbs.swiper.on("tap",r),!0}function l(s){const i=o.thumbs.swiper;if(i&&!i.destroyed){const l="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView;let t=1;var a=o.params.thumbs.slideThumbActiveClass;if(1<o.params.slidesPerView&&!o.params.centeredSlides&&(t=o.params.slidesPerView),o.params.thumbs.multipleActiveThumbs||(t=1),t=Math.floor(t),i.slides.removeClass(a),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<t;e+=1)i.$wrapperEl.children(`[data-swiper-slide-index="${o.realIndex+e}"]`).addClass(a);else for(let e=0;e<t;e+=1)i.slides.eq(o.realIndex+e).addClass(a);var r=o.params.thumbs.autoScrollOffset,n=r&&!i.params.loop;if(o.realIndex!==i.realIndex||n){let e,t,a=i.activeIndex;if(i.params.loop){i.slides.eq(a).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,a=i.activeIndex);const s=i.slides.eq(a).prevAll(`[data-swiper-slide-index="${o.realIndex}"]`).eq(0).index(),l=i.slides.eq(a).nextAll(`[data-swiper-slide-index="${o.realIndex}"]`).eq(0).index();e=void 0===s?l:void 0===l?s:l-a==a-s?1<i.params.slidesPerGroup?l:a:l-a<a-s?l:s,t=o.activeIndex>o.previousIndex?"next":"prev"}else e=o.realIndex,t=e>o.previousIndex?"next":"prev";n&&(e+="next"===t?r:-1*r),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(e)<0&&(i.params.centeredSlides?e=e>a?e-Math.floor(l/2)+1:e+Math.floor(l/2)-1:e>a&&i.params.slidesPerGroup,i.slideTo(e,s?0:void 0))}}}o.thumbs={swiper:null},a("beforeInit",()=>{var e=o.params["thumbs"];e&&e.swiper&&(n(),l(!0))}),a("slideChange update resize observerUpdate",()=>{l()}),a("setTransition",(e,t)=>{const a=o.thumbs.swiper;a&&!a.destroyed&&a.setTransition(t)}),a("beforeDestroy",()=>{const e=o.thumbs.swiper;e&&!e.destroyed&&i&&e.destroy()}),Object.assign(o.thumbs,{init:n,update:l})},function(e){let{swiper:u,extendParams:t,emit:h,once:m}=e;t({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(u,{freeMode:{onTouchStart:function(){var e=u.getTranslate();u.setTranslate(e),u.setTransition(0),u.touchEventsData.velocities.length=0,u.freeMode.onTouchEnd({currentPos:u.rtl?u.translate:-u.translate})},onTouchMove:function(){const{touchEventsData:e,touches:t}=u;0===e.velocities.length&&e.velocities.push({position:t[u.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:t[u.isHorizontal()?"currentX":"currentY"],time:v()})},onTouchEnd:function(r){let n=r["currentPos"];const{params:l,$wrapperEl:o,rtlTranslate:d,snapGrid:c,touchEventsData:p}=u,e=v()-p.touchStartTime;if(n<-u.minTranslate())u.slideTo(u.activeIndex);else if(n>-u.maxTranslate())u.slides.length<c.length?u.slideTo(c.length-1):u.slideTo(u.slides.length-1);else{if(l.freeMode.momentum){if(1<p.velocities.length){const r=p.velocities.pop(),n=p.velocities.pop(),h=r.position-n.position,m=r.time-n.time;u.velocity=h/m,u.velocity/=2,Math.abs(u.velocity)<l.freeMode.minimumVelocity&&(u.velocity=0),(150<m||300<v()-r.time)&&(u.velocity=0)}else u.velocity=0;u.velocity*=l.freeMode.momentumVelocityRatio,p.velocities.length=0;let e=1e3*l.freeMode.momentumRatio;const n=u.velocity*e;let a=u.translate+n;d&&(a=-a);let t,s=!1;r=20*Math.abs(u.velocity)*l.freeMode.momentumBounceRatio;let i;if(a<u.maxTranslate())l.freeMode.momentumBounce?(a+u.maxTranslate()<-r&&(a=u.maxTranslate()-r),t=u.maxTranslate(),s=!0,p.allowMomentumBounce=!0):a=u.maxTranslate(),l.loop&&l.centeredSlides&&(i=!0);else if(a>u.minTranslate())l.freeMode.momentumBounce?(a-u.minTranslate()>r&&(a=u.minTranslate()+r),t=u.minTranslate(),s=!0,p.allowMomentumBounce=!0):a=u.minTranslate(),l.loop&&l.centeredSlides&&(i=!0);else if(l.freeMode.sticky){let t;for(let e=0;e<c.length;e+=1)if(c[e]>-a){t=e;break}a=-(a=Math.abs(c[t]-a)<Math.abs(c[t-1]-a)||"next"===u.swipeDirection?c[t]:c[t-1])}if(i&&m("transitionEnd",()=>{u.loopFix()}),0!==u.velocity){if(e=d?Math.abs((-a-u.translate)/u.velocity):Math.abs((a-u.translate)/u.velocity),l.freeMode.sticky){const n=Math.abs((d?-a:a)-u.translate),h=u.slidesSizesGrid[u.activeIndex];e=n<h?l.speed:n<2*h?1.5*l.speed:2.5*l.speed}}else if(l.freeMode.sticky)return void u.slideToClosest();l.freeMode.momentumBounce&&s?(u.updateProgress(t),u.setTransition(e),u.setTranslate(a),u.transitionStart(!0,u.swipeDirection),u.animating=!0,o.transitionEnd(()=>{u&&!u.destroyed&&p.allowMomentumBounce&&(h("momentumBounce"),u.setTransition(l.speed),setTimeout(()=>{u.setTranslate(t),o.transitionEnd(()=>{u&&!u.destroyed&&u.transitionEnd()})},0))})):u.velocity?(h("_freeModeNoMomentumRelease"),u.updateProgress(a),u.setTransition(e),u.setTranslate(a),u.transitionStart(!0,u.swipeDirection),u.animating||(u.animating=!0,o.transitionEnd(()=>{u&&!u.destroyed&&u.transitionEnd()}))):u.updateProgress(a),u.updateActiveIndex(),u.updateSlidesClasses()}else{if(l.freeMode.sticky)return void u.slideToClosest();l.freeMode&&h("_freeModeNoMomentumRelease")}(!l.freeMode.momentum||e>=l.longSwipesMs)&&(u.updateProgress(),u.updateActiveIndex(),u.updateSlidesClasses())}}}})},function(e){let p,u,h,{swiper:m,extendParams:t}=e;t({grid:{rows:1,fill:"column"}}),m.grid={initSlides:e=>{var t=m.params["slidesPerView"],{rows:a,fill:s}=m.params.grid;u=p/a,h=Math.floor(e/a),p=Math.floor(e/a)===e/a?e:Math.ceil(e/a)*a,"auto"!==t&&"row"===s&&(p=Math.max(p,t*a))},updateSlide:(e,t,a,s)=>{var{slidesPerGroup:i,spaceBetween:r}=m.params,{rows:n,fill:l}=m.params.grid;let o,d,c;if("row"===l&&1<i){const u=Math.floor(e/(i*n)),h=e-n*i*u,m=0===u?i:Math.min(Math.ceil((a-u*n*i)/n),i);c=Math.floor(h/m),o=(d=h-c*m+u*i)+c*p/n,t.css({"-webkit-order":o,order:o})}else"column"===l?(d=Math.floor(e/n),c=e-d*n,(d>h||d===h&&c===n-1)&&((c+=1)>=n&&(c=0,d+=1))):(c=Math.floor(e/u),d=e-c*u);t.css(s("margin-top"),0!==c?r&&r+"px":"")},updateWrapperSize:(a,s,e)=>{var{spaceBetween:t,centeredSlides:i,roundLengths:r}=m.params,n=m.params.grid["rows"];if(m.virtualSize=(a+t)*p,m.virtualSize=Math.ceil(m.virtualSize/n)-t,m.$wrapperEl.css({[e("width")]:m.virtualSize+t+"px"}),i){s.splice(0,s.length);const a=[];for(let t=0;t<s.length;t+=1){let e=s[t];r&&(e=Math.floor(e)),s[t]<m.virtualSize+s[0]&&a.push(e)}s.push(...a)}}}},function(e){e=e.swiper;Object.assign(e,{appendSlide:function(t){const{$wrapperEl:a,params:e}=this;if(e.loop&&this.loopDestroy(),"object"==typeof t&&"length"in t)for(let e=0;e<t.length;e+=1)t[e]&&a.append(t[e]);else a.append(t);e.loop&&this.loopCreate(),e.observer||this.update()}.bind(e),prependSlide:function(t){const e=this,{params:a,$wrapperEl:s,activeIndex:i}=e;a.loop&&e.loopDestroy();let r=i+1;if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&s.prepend(t[e]);r=i+t.length}else s.prepend(t);a.loop&&e.loopCreate(),a.observer||e.update(),e.slideTo(r,0,!1)}.bind(e),addSlide:function(t,a){const s=this,{$wrapperEl:i,params:r,activeIndex:e}=s;let n=e;r.loop&&(n-=s.loopedSlides,s.loopDestroy(),s.slides=i.children("."+r.slideClass));var l=s.slides.length;if(t<=0)s.prependSlide(a);else if(l<=t)s.appendSlide(a);else{let e=n>t?n+1:n;const o=[];for(let e=l-1;e>=t;--e){const t=s.slides.eq(e);t.remove(),o.unshift(t)}if("object"==typeof a&&"length"in a){for(let e=0;e<a.length;e+=1)a[e]&&i.append(a[e]);e=n>t?n+a.length:n}else i.append(a);for(let e=0;e<o.length;e+=1)i.append(o[e]);r.loop&&s.loopCreate(),r.observer||s.update(),r.loop?s.slideTo(e+s.loopedSlides,0,!1):s.slideTo(e,0,!1)}}.bind(e),removeSlide:function(t){const a=this,{params:e,$wrapperEl:s,activeIndex:i}=a;let r=i;e.loop&&(r-=a.loopedSlides,a.loopDestroy(),a.slides=s.children("."+e.slideClass));let n,l=r;if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)n=t[e],a.slides[n]&&a.slides.eq(n).remove(),n<l&&--l;l=Math.max(l,0)}else n=t,a.slides[n]&&a.slides.eq(n).remove(),n<l&&--l,l=Math.max(l,0);e.loop&&a.loopCreate(),e.observer||a.update(),e.loop?a.slideTo(l+a.loopedSlides,0,!1):a.slideTo(l,0,!1)}.bind(e),removeAllSlides:function(){const t=[];for(let e=0;e<this.slides.length;e+=1)t.push(e);this.removeSlide(t)}.bind(e)})},function(e){let{swiper:n,extendParams:t,on:a}=e;t({fadeEffect:{crossFade:!1,transformEl:null}}),k({effect:"fade",swiper:n,on:a,setTranslate:()=>{const s=n["slides"],i=n.params.fadeEffect;for(let a=0;a<s.length;a+=1){const s=n.slides.eq(a);let e=-s[0].swiperSlideOffset,t=(n.params.virtualTranslate||(e-=n.translate),0);n.isHorizontal()||(t=e,e=0);var r=n.params.fadeEffect.crossFade?Math.max(1-Math.abs(s[0].progress),0):1+Math.min(Math.max(s[0].progress,-1),0);L(i,s).css({opacity:r}).transform(`translate3d(${e}px, ${t}px, 0px)`)}},setTransition:e=>{var t=n.params.fadeEffect["transformEl"];(t?n.slides.find(t):n.slides).transition(e),A({swiper:n,duration:e,transformEl:t,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!n.params.cssMode})})},function(e){let{swiper:f,extendParams:t,on:a}=e;t({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const g=(e,t,a)=>{let s=a?e.find(".swiper-slide-shadow-left"):e.find(".swiper-slide-shadow-top"),i=a?e.find(".swiper-slide-shadow-right"):e.find(".swiper-slide-shadow-bottom");0===s.length&&(s=I(`<div class="swiper-slide-shadow-${a?"left":"top"}"></div>`),e.append(s)),0===i.length&&(i=I(`<div class="swiper-slide-shadow-${a?"right":"bottom"}"></div>`),e.append(i)),s.length&&(s[0].style.opacity=Math.max(-t,0)),i.length&&(i[0].style.opacity=Math.max(t,0))};k({effect:"cube",swiper:f,on:a,setTranslate:()=>{const{$el:e,$wrapperEl:t,slides:l,width:a,height:s,rtlTranslate:o,size:d,browser:i}=f,c=f.params.cubeEffect,p=f.isHorizontal(),u=f.virtual&&f.params.virtual.enabled;let r,h=0;c.shadow&&(p?(0===(r=t.find(".swiper-cube-shadow")).length&&(r=I('<div class="swiper-cube-shadow"></div>'),t.append(r)),r.css({height:a+"px"})):0===(r=e.find(".swiper-cube-shadow")).length&&(r=I('<div class="swiper-cube-shadow"></div>'),e.append(r)));for(let n=0;n<l.length;n+=1){const f=l.eq(n);let e=n,t=90*(e=u?parseInt(f.attr("data-swiper-slide-index"),10):e),a=Math.floor(t/360);o&&(t=-t,a=Math.floor(-t/360));const I=Math.max(Math.min(f[0].progress,1),-1);let s=0,i=0,r=0;e%4==0?(s=4*-a*d,r=0):(e-1)%4==0?(s=0,r=4*-a*d):(e-2)%4==0?(s=d+4*a*d,r=d):(e-3)%4==0&&(s=-d,r=3*d+4*d*a),o&&(s=-s),p||(i=s,s=0);var m=`rotateX(${p?0:-t}deg) rotateY(${p?t:0}deg) translate3d(${s}px, ${i}px, ${r}px)`;I<=1&&-1<I&&(h=90*e+90*I,o&&(h=90*-e-90*I)),f.transform(m),c.slideShadows&&g(f,I,p)}if(t.css({"-webkit-transform-origin":`50% 50% -${d/2}px`,"transform-origin":`50% 50% -${d/2}px`}),c.shadow)if(p)r.transform(`translate3d(0px, ${a/2+c.shadowOffset}px, ${-a/2}px) rotateX(90deg) rotateZ(0deg) scale(${c.shadowScale})`);else{const e=Math.abs(h)-90*Math.floor(Math.abs(h)/90),f=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),t=c.shadowScale,l=c.shadowScale/f,g=c.shadowOffset;r.transform(`scale3d(${t}, 1, ${l}) translate3d(0px, ${s/2+g}px, ${-s/2/l}px) rotateX(-90deg)`)}var n=i.isSafari||i.isWebView?-d/2:0;t.transform(`translate3d(0px,0,${n}px) rotateX(${f.isHorizontal()?0:h}deg) rotateY(${f.isHorizontal()?-h:0}deg)`),t[0].style.setProperty("--swiper-cube-translate-z",n+"px")},setTransition:e=>{const{$el:t,slides:a}=f;a.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),f.params.cubeEffect.shadow&&!f.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)},recreateShadows:()=>{const a=f.isHorizontal();f.slides.each(e=>{var t=Math.max(Math.min(e.progress,1),-1);g(I(e),t,a)})},getEffectParams:()=>f.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function(e){let{swiper:p,extendParams:t,on:a}=e;t({flipEffect:{slideShadows:!0,limitRotation:!0,transformEl:null}});const u=(e,t,a)=>{let s=p.isHorizontal()?e.find(".swiper-slide-shadow-left"):e.find(".swiper-slide-shadow-top"),i=p.isHorizontal()?e.find(".swiper-slide-shadow-right"):e.find(".swiper-slide-shadow-bottom");0===s.length&&(s=_(a,e,p.isHorizontal()?"left":"top")),0===i.length&&(i=_(a,e,p.isHorizontal()?"right":"bottom")),s.length&&(s[0].style.opacity=Math.max(-t,0)),i.length&&(i[0].style.opacity=Math.max(t,0))};k({effect:"flip",swiper:p,on:a,setTranslate:()=>{const{slides:n,rtlTranslate:l}=p,o=p.params.flipEffect;for(let r=0;r<n.length;r+=1){const c=n.eq(r);let e=c[0].progress;p.params.flipEffect.limitRotation&&(e=Math.max(Math.min(c[0].progress,1),-1));var d=c[0].swiperSlideOffset;let t=-180*e,a=0,s=p.params.cssMode?-d-p.translate:-d,i=0;p.isHorizontal()?l&&(t=-t):(i=s,s=0,a=-t,t=0),c[0].style.zIndex=-Math.abs(Math.round(e))+n.length,o.slideShadows&&u(c,e,o);d=`translate3d(${s}px, ${i}px, 0px) rotateX(${a}deg) rotateY(${t}deg)`;L(o,c).transform(d)}},setTransition:e=>{var t=p.params.flipEffect["transformEl"];(t?p.slides.find(t):p.slides).transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),A({swiper:p,duration:e,transformEl:t})},recreateShadows:()=>{const s=p.params.flipEffect;p.slides.each(e=>{var t=I(e);let a=t[0].progress;p.params.flipEffect.limitRotation&&(a=Math.max(Math.min(e.progress,1),-1)),u(t,a,s)})},getEffectParams:()=>p.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!p.params.cssMode})})},function(e){let{swiper:b,extendParams:t,on:a}=e;t({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0,transformEl:null}}),k({effect:"coverflow",swiper:b,on:a,setTranslate:()=>{const{width:e,height:o,slides:d,slidesSizesGrid:c}=b,p=b.params.coverflowEffect,u=b.isHorizontal(),h=b.translate,m=u?e/2-h:o/2-h,f=u?p.rotate:-p.rotate,g=p.depth;for(let l=0,e=d.length;l<e;l+=1){const b=d.eq(l),o=c[l],h=(m-b[0].swiperSlideOffset-o/2)/o,w="function"==typeof p.modifier?p.modifier(h):h*p.modifier;let e=u?f*w:0,t=u?0:f*w,a=-g*Math.abs(w),s=p.stretch,i=("string"==typeof s&&-1!==s.indexOf("%")&&(s=parseFloat(p.stretch)/100*o),u?0:s*w),r=u?s*w:0,n=1-(1-p.scale)*Math.abs(w);Math.abs(r)<.001&&(r=0),Math.abs(i)<.001&&(i=0),Math.abs(a)<.001&&(a=0),Math.abs(e)<.001&&(e=0),Math.abs(t)<.001&&(t=0),Math.abs(n)<.001&&(n=0);var v=`translate3d(${r}px,${i}px,${a}px)  rotateX(${t}deg) rotateY(${e}deg) scale(${n})`;if(L(p,b).transform(v),b[0].style.zIndex=1-Math.abs(Math.round(w)),p.slideShadows){let e=u?b.find(".swiper-slide-shadow-left"):b.find(".swiper-slide-shadow-top"),t=u?b.find(".swiper-slide-shadow-right"):b.find(".swiper-slide-shadow-bottom");0===e.length&&(e=_(p,b,u?"left":"top")),0===t.length&&(t=_(p,b,u?"right":"bottom")),e.length&&(e[0].style.opacity=0<w?w:0),t.length&&(t[0].style.opacity=0<-w?-w:0)}}},setTransition:e=>{var t=b.params.coverflowEffect["transformEl"];(t?b.slides.find(t):b.slides).transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function(e){let{swiper:b,extendParams:t,on:a}=e;t({creativeEffect:{transformEl:null,limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});k({effect:"creative",swiper:b,on:a,setTranslate:()=>{const{slides:i,$wrapperEl:e,slidesSizesGrid:r}=b,n=b.params.creativeEffect,l=n["progressMultiplier"],o=b.params.centeredSlides;if(o){const i=r[0]/2-b.params.slidesOffsetBefore||0;e.transform(`translateX(calc(50% - ${i}px))`)}for(let s=0;s<i.length;s+=1){const r=i.eq(s),h=r[0].progress,m=Math.min(Math.max(r[0].progress,-n.limitProgress),n.limitProgress);let e=m;o||(e=Math.min(Math.max(r[0].originalProgress,-n.limitProgress),n.limitProgress));const f=r[0].swiperSlideOffset,g=[b.params.cssMode?-f-b.translate:-f,0,0],v=[0,0,0];let t=!1,a=(b.isHorizontal()||(g[1]=g[0],g[0]=0),{translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1});m<0?(a=n.next,t=!0):0<m&&(a=n.prev,t=!0),g.forEach((e,t)=>{g[t]=`calc(${e}px + (${e=a.translate[t],"string"==typeof e?e:e+"px"} * ${Math.abs(m*l)}))`}),v.forEach((e,t)=>{v[t]=a.rotate[t]*Math.abs(m*l)}),r[0].style.zIndex=-Math.abs(Math.round(h))+i.length;var d=g.join(", "),c=`rotateX(${v[0]}deg) rotateY(${v[1]}deg) rotateZ(${v[2]}deg)`,p=e<0?`scale(${1+(1-a.scale)*e*l})`:`scale(${1-(1-a.scale)*e*l})`,u=e<0?1+(1-a.opacity)*e*l:1-(1-a.opacity)*e*l,d=`translate3d(${d}) ${c} `+p;if(t&&a.shadow||!t){let e=r.children(".swiper-slide-shadow");if((e=0===e.length&&a.shadow?_(n,r):e).length){const b=n.shadowPerProgress?m*(1/n.limitProgress):m;e[0].style.opacity=Math.min(Math.max(Math.abs(b),0),1)}}const w=L(n,r);w.transform(d).css({opacity:u}),a.origin&&w.css("transform-origin",a.origin)}},setTransition:e=>{var t=b.params.creativeEffect["transformEl"];(t?b.slides.find(t):b.slides).transition(e).find(".swiper-slide-shadow").transition(e),A({swiper:b,duration:e,transformEl:t,allSlides:!0})},perspective:()=>b.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!b.params.cssMode})})},function(e){let{swiper:b,extendParams:t,on:a}=e;t({cardsEffect:{slideShadows:!0,transformEl:null,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),k({effect:"cards",swiper:b,on:a,setTranslate:()=>{const{slides:l,activeIndex:o}=b,d=b.params.cardsEffect,{startTranslate:c,isTouched:p}=b.touchEventsData,u=b.translate;for(let n=0;n<l.length;n+=1){const g=l.eq(n),v=g[0].progress,w=Math.min(Math.max(v,-4),4);let e=g[0].swiperSlideOffset,t=(b.params.centeredSlides&&!b.params.cssMode&&b.$wrapperEl.transform(`translateX(${b.minTranslate()}px)`),b.params.centeredSlides&&b.params.cssMode&&(e-=l[0].swiperSlideOffset),b.params.cssMode?-e-b.translate:-e),a=0;var h=-100*Math.abs(w);let s=1,i=-d.perSlideRotate*w,r=d.perSlideOffset-.75*Math.abs(w);var m=b.virtual&&b.params.virtual.enabled?b.virtual.from+n:n,f=(m===o||m===o-1)&&0<w&&w<1&&(p||b.params.cssMode)&&u<c,m=(m===o||m===o+1)&&w<0&&-1<w&&(p||b.params.cssMode)&&c<u;if(f||m){const l=(1-Math.abs((Math.abs(w)-.5)/.5))**.5;i+=-28*w*l,s+=-.5*l,r+=96*l,a=-25*l*Math.abs(w)+"%"}if(t=w<0?`calc(${t}px + (${r*Math.abs(w)}%))`:0<w?`calc(${t}px + (-${r*Math.abs(w)}%))`:t+"px",!b.isHorizontal()){const l=a;a=t,t=l}f=w<0?""+(1+(1-s)*w):""+(1-(1-s)*w),m=`
        translate3d(${t}, ${a}, ${h}px)
        rotateZ(${d.rotate?i:0}deg)
        scale(${f})
      `;if(d.slideShadows){let e=g.find(".swiper-slide-shadow");(e=0===e.length?_(d,g):e).length&&(e[0].style.opacity=Math.min(Math.max((Math.abs(w)-.5)/.5,0),1))}g[0].style.zIndex=-Math.abs(Math.round(v))+l.length,L(d,g).transform(m)}},setTransition:e=>{var t=b.params.cardsEffect["transformEl"];(t?b.slides.find(t):b.slides).transition(e).find(".swiper-slide-shadow").transition(e),A({swiper:b,duration:e,transformEl:t})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!b.params.cssMode})})}]),S});const drwawers=document.querySelectorAll(".i-accordion-btn"),dropdowns=(drwawers.length&&drwawers.forEach(e=>{e.parentElement.classList.contains("active")&&(e.nextElementSibling.style.maxHeight=e.nextElementSibling.scrollHeight+"px"),e.onclick=()=>accordion(e)}),document.querySelectorAll('[data-dropdown="dropdown"]'));if(dropdowns.length)for(let e=0;e<dropdowns.length;e++){const SE=dropdowns[e],TE=SE.querySelector('[data-dropdown="btn"]'),UE=SE.querySelector('[data-dropdown="menu"]');TE.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation();for(let e=0;e<dropdowns.length;e++)if(!dropdowns[e].contains(SE)){const t=dropdowns[e].querySelector('[data-dropdown="menu"]'),a=dropdowns[e].querySelector('[data-dropdown="btn"]');t.classList.remove("show"),a.classList.remove("active")}UE.classList.toggle("show"),TE.classList.toggle("active")}),UE.addEventListener("click",e=>{e.stopPropagation();const t=SE.querySelectorAll('[data-dropdown="dropdown"]');if(t.length)for(let e=0;e<t.length;e++){const a=t[e].querySelector('[data-dropdown="menu"]'),s=t[e].querySelector('[data-dropdown="btn"]');a.classList.remove("show"),s.classList.remove("active")}}),document.querySelector("html").addEventListener("click",()=>{TE.classList.remove("active"),UE.classList.remove("show")})}!function(){var a,s=document.documentElement,i=window,r=i.scrollY||s.scrollTop,n="initial",l="initial",o=document.querySelector(".i-header"),d=document.querySelector(".i-widget"),c=document.querySelector(".i-controls");window.addEventListener("scroll",function(){if(a=i.scrollY||s.scrollTop,r<a?n="up":a<r&&(n="down"),n!==l){var e=n,t=a;if(e==="up"&&t>132){o.classList.add("hide");l=e}else if(e==="down"){o.classList.remove("hide");l=e}}132<(r=a)?(o.classList.add("fixed"),d.classList.add("show"),c&&(c.getBoundingClientRect().top<=0?c.classList.add("fixed"):c.classList.remove("fixed"))):(o.classList.remove("fixed"),d.classList.remove("show"))})}(),function(){const e=document.querySelectorAll(".i-info-items .i-info-items-link"),a=document.querySelector(".i-controls-nav .swiper-wrapper");e.forEach(e=>{const t=document.createElement("DIV");t.classList.add("swiper-slide"),t.innerHTML=`
		<a href="${e.href}" class="i-info-items-link">${e.textContent}</a>
		`,a.appendChild(t)})}();var lazyLoadInstance=new LazyLoad({});function showMenu(e){document.querySelector("."+e).classList.add("show"),document.querySelector(".i-overlay").classList.add("show")}function hideMenu(e){document.querySelector("."+e).classList.remove("show"),document.querySelector(".i-overlay").classList.remove("show")}!function(){var t,a=document.documentElement,s=window,i=s.scrollY||a.scrollTop,r="initial",n="initial",l=document.querySelector(".i-nav");window.addEventListener("scroll",function(){if(t=s.scrollY||a.scrollTop,i<t?r="up":t<i&&(r="down"),r!==n){var e=r;if(e==="down"){l.classList.add("show");n=e}else if(e==="up"){l.classList.remove("show");n=e}}i=t})}();const fromSlider=document.querySelector("#from-range"),toSlider=document.querySelector("#to-range"),fromInput=document.querySelector("#price-min"),toInput=document.querySelector("#price-max");function controlFromInput(e,t,a,s){var[i,r]=getParsed(t,a);fillSlider(t,a,"#f2f2f2","#4E5364",s),r<i?(e.value=r,t.value=r):i<=r?(e.value=i,t.value=i):(e.value=0,t.value=0)}function controlToInput(e,t,a,s){var[i,r]=getParsed(t,a);fillSlider(t,a,"#f2f2f2","#4E5364",s),setToggleAccessible(a),i<=r?(e.value=r,a.value=r):(a.value=i,e.value=i)}function controlFromSlider(e,t,a){var[s,i]=getParsed(e,t);fillSlider(e,t,"#f2f2f2","#4E5364",t),i<s?(e.value=i,a.value=i):a.value=s}function controlToSlider(e,t,a){var[s,i]=getParsed(e,t);fillSlider(e,t,"#f2f2f2","#4E5364",t),setToggleAccessible(t),s<=i?(t.value=i,a.value=i):(a.value=s,t.value=s)}function getParsed(e,t){return[parseInt(e.value,10),parseInt(t.value,10)]}function fillSlider(e,t,a,s,i){var r=t.max-t.min,e=e.value-t.min,t=t.value-t.min;i.style.background=`linear-gradient(
    to right,
    ${a} 0%,
    ${a} ${e/r*100}%,
    ${s} ${e/r*100}%,
    ${s} ${t/r*100}%,
    ${a} ${t/r*100}%,
    ${a} 100%)`}function setToggleAccessible(e){Number(e.value)<=0?toSlider.style.zIndex=2:toSlider.style.zIndex=0}fromInput,toInput,fromSlider,toSlider&&(fillSlider(fromSlider,toSlider,"#f2f2f2","#4E5364",toSlider),setToggleAccessible(toSlider),fromSlider.oninput=()=>controlFromSlider(fromSlider,toSlider,fromInput),toSlider.oninput=()=>controlToSlider(fromSlider,toSlider,toInput),fromInput.oninput=()=>controlFromInput(fromSlider,fromInput,toInput,toSlider),toInput.oninput=()=>controlToInput(toSlider,fromInput,toInput,toSlider));const prmoSlider=new Swiper(".i-promo-swiper .swiper",{slidesPerView:1,preloadImages:!1,lazy:{enabled:!0,checkInView:!0},pagination:{el:".swiper-pagination",type:"bullets",clickable:!0}}),reviewsSlider=new Swiper(".i-reviews-slider .swiper",{spaceBetween:20,slidesPerView:1,autoplay:{delay:5e3},navigation:{nextEl:".i-reviews-head .swiper-button-next",prevEl:".i-reviews-head .swiper-button-prev"},breakpoints:{576:{slidesPerView:2},992:{slidesPerView:3}}}),cardsSlider=new Swiper(".i-slider-wrapper .swiper",{spaceBetween:10,slidesPerGroup:1,slidesPerView:1.5,speed:1e3,breakpoints:{400:{slidesPerView:2.1,slidesPerGroup:2},992:{slidesPerView:3.1,slidesPerGroup:3},1200:{slidesPerView:4.1,slidesPerGroup:4}}}),itemsSlider=new Swiper(".i-items-wrapper .swiper",{slidesPerView:"auto",spaceBetween:30,freemode:!0,breakpoints:{576:{spaceBetween:64}}}),controlsSlider=new Swiper(".i-controls-nav .swiper",{slidesPerView:"auto",spaceBetween:20,freemode:{enabled:!0}});function toast(e){const t=document.querySelector(".i-toast"),a=(t.textContent=e,t.classList.add("i-toast_show"),setTimeout(()=>(t.classList.remove("i-toast_show"),clearTimeout(a)),3e3))}function showElement(e){document.querySelector("."+e).classList.add("show")}function hideElement(e){document.querySelector("."+e).classList.remove("show")}const viewLinks=document.querySelectorAll(".i-controls-view-link"),grid=document.querySelector(".i-grid");viewLinks.length&&viewLinks.forEach(a=>{a.addEventListener("click",()=>{var e,t="view-"+a.textContent;grid.classList.remove("view-3"),grid.classList.remove("view-4"),grid.classList.add(t);for(e of viewLinks)e.classList.remove("i-controls-view-link_active");a.classList.add("i-controls-view-link_active")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
